{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the WildBeast documentation!\n\n\nWhat is WildBeast?\n\n\nWildBeast is a multifunction Discord bot system intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8ball, meme generation, music playback) in your Discord server. It has an extensive per-server customization system with various settings. For people interested in running a WildBeast instance themselves, there is even a sort of API for making your own commands.\n\n\nBrief history\n\n\nWildBeast was originally written by 3 avid coders in 2015. Since then many devs have come and gone, years have rolled by and the bot has continuously matured. It's currently being constantly developed and improved by a multinational team of 11 developers, moderators and other personnel at the time of writing. Check out the team \nhere\n!\n\n\n\n\nTip\n\n\nFor those interested in the technical bits, WildBeast is written in JavaScript utilizing Node.js. It uses the \ndiscordie\n library to interact with the Discord API.\n\n\n\n\nMain features\n\n\nThese features are available in every WildBeast instance, including our official WildBot!\n\n\n\n\nMusic streaming from YouTube, SoundCloud and so forth.\n\n\nClassy insults and strokes.\n\n\nDank meme generator.\n\n\nUseful advice.\n\n\nModeration commands like kick, ban and so forth.\n\n\nRole commands like addrole, takerole and colorrole.\n\n\nNSFW image fetching via e621 and rule34.\n\n\nServer utilities like welcome messages, server and user info and so forth.\n\n\nHigh level of customization with an extensive per-server configuration engine.\n\n\nExtensive support and documentation of running your own WildBeast.\n\n\nA sort-of API for you to create custom commands (If you're running a custom instance).\n\n\n\n\nAnd much more; check out \nthe command reference\n and \nthe custom command page\n for starters!\n\n\nSelfhosting\n\n\nWe provide documentation and support on installing WildBeast over here in the docs, written by our \ndocumentation writers\n. Currently we support installation on Windows and Linux systems. Docker instructions for Windows are available.\n\n\nResources for selfhosters\n\n\n\n\nWindows installation\n\n\nLinux installation\n\n\nDocker installation\n\n\nCustom command doc\n\n\nUpdating guide\n\n\nSharding\n\n\n\n\nDiscord server\n\n\nWe run a Discord server in which you can test WildBeast's functionality in our own sandbox. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-wildbeast-documentation",
            "text": "",
            "title": "Welcome to the WildBeast documentation!"
        },
        {
            "location": "/#what-is-wildbeast",
            "text": "WildBeast is a multifunction Discord bot system intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8ball, meme generation, music playback) in your Discord server. It has an extensive per-server customization system with various settings. For people interested in running a WildBeast instance themselves, there is even a sort of API for making your own commands.",
            "title": "What is WildBeast?"
        },
        {
            "location": "/#brief-history",
            "text": "WildBeast was originally written by 3 avid coders in 2015. Since then many devs have come and gone, years have rolled by and the bot has continuously matured. It's currently being constantly developed and improved by a multinational team of 11 developers, moderators and other personnel at the time of writing. Check out the team  here !   Tip  For those interested in the technical bits, WildBeast is written in JavaScript utilizing Node.js. It uses the  discordie  library to interact with the Discord API.",
            "title": "Brief history"
        },
        {
            "location": "/#main-features",
            "text": "These features are available in every WildBeast instance, including our official WildBot!   Music streaming from YouTube, SoundCloud and so forth.  Classy insults and strokes.  Dank meme generator.  Useful advice.  Moderation commands like kick, ban and so forth.  Role commands like addrole, takerole and colorrole.  NSFW image fetching via e621 and rule34.  Server utilities like welcome messages, server and user info and so forth.  High level of customization with an extensive per-server configuration engine.  Extensive support and documentation of running your own WildBeast.  A sort-of API for you to create custom commands (If you're running a custom instance).   And much more; check out  the command reference  and  the custom command page  for starters!",
            "title": "Main features"
        },
        {
            "location": "/#selfhosting",
            "text": "We provide documentation and support on installing WildBeast over here in the docs, written by our  documentation writers . Currently we support installation on Windows and Linux systems. Docker instructions for Windows are available.  Resources for selfhosters   Windows installation  Linux installation  Docker installation  Custom command doc  Updating guide  Sharding",
            "title": "Selfhosting"
        },
        {
            "location": "/#discord-server",
            "text": "We run a Discord server in which you can test WildBeast's functionality in our own sandbox. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.",
            "title": "Discord server"
        },
        {
            "location": "/commands/",
            "text": "This is the command reference for WildBeast. You can find more elaborative information here on each of the commands currently implemented.\n\n\n\n\nTip\n\n\nIf you have a need for any further info, you can send the message \n{prefix}help <command>\n to the bot to get info about timeouts and so forth. For lengthier explanations on the usage of the commands, check out \n#le-guide\n in \nWildBot's Territory\n.\n\n\n\n\nThe prefix is not specified in this reference. You have to apply your own prefix to the commands. If you don't know the prefix, type \n@BotName prefix\n in the server you're using.\n\n\nAnother thing to note is that some commands will have an empty \nUsage\n field on this page. This means that the command takes no arguments and is accepted as such.\n\n\nCommand reference\n\n\nGeneral commands\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nUsage\n\n\nLevel/Required permission\n\n\n\n\n\n\n\n\n\n\naddrole\n\n\nAdd a role to a user.\n\n\naddrole @User @User2 \n<role name>\n\n\n3, Manage Roles\n\n\n\n\n\n\nban\n\n\nBan a user from the server.\n\n\nban \n<days of messages to delete>\n @User @User2 \n<reason>\n\n\nBan Members\n\n\n\n\n\n\ncolorrole\n\n\nChange a role color to a hexadecimal value. Hashtag accepted but not required.\n\n\ncolorrole \n<#FFFFFF/FFFFFF>\n \n<role name>\n\n\n3, Manage Roles\n\n\n\n\n\n\ncustomize\n\n\nCustomize the bot's behavior in the server.\n\n\nSee the table at the bottom of the page.\n\n\n3\n\n\n\n\n\n\neval\n\n\nEvaluate JavaScript code.\n\n\neval \n<code>\n\n\nmaster\n\n\n\n\n\n\nhackban\n\n\nBan a member that is not a member of the server (By ID).\n\n\nhackban \n<userid/multiple-ids>\n \n<reason>\n\n\nBan Members\n\n\n\n\n\n\nhello\n\n\nMake the bot greet you.\n\n\n\n\n0\n\n\n\n\n\n\ninfo\n\n\nPrint information about the bot.\n\n\n\n\n0\n\n\n\n\n\n\njoin-server\n\n\nReturn the OAuth URL for the bot.\n\n\n\n\n0\n\n\n\n\n\n\nkick\n\n\nKick a user from the server.\n\n\nkick @User \n<reason>\n\n\nKick Members\n\n\n\n\n\n\nkillswitch\n\n\nClose the bot process.\n\n\n\n\nmaster\n\n\n\n\n\n\nleave-server\n\n\nLeave a server.\n\n\n\n\n3\n\n\n\n\n\n\nnamechanges\n\n\nDetect name changes from a user.\n\n\nnamechanges @User\n\n\n0\n\n\n\n\n\n\nping\n\n\nPing the bot to test responsiveness.\n\n\n\n\n0\n\n\n\n\n\n\nplaineval\n\n\nSame as eval, just with a different scope.\n\n\nplaineval \n<code>\n\n\nmaster\n\n\n\n\n\n\nprefix\n\n\nMake the bot return its current prefix.\n\n\n\n\n0\n\n\n\n\n\n\npurge\n\n\nDelete a specified count of messages.\n\n\npurge \n<amount>\n\n\nManage Messages\n\n\n\n\n\n\nrankup\n\n\nBump a user's permission level up by one notch.\n\n\nrankup @User\n\n\n3\n\n\n\n\n\n\nsay\n\n\nMake the bot say something you specify.\n\n\nsay \n<message>\n\n\n0\n\n\n\n\n\n\nserver-info\n\n\nPrint information on the server.\n\n\n\n\n0\n\n\n\n\n\n\nsetlevel\n\n\nSet the level of a user or role.\n\n\nsetlevel \n<-1/0/1/2/3>\n \n<@User/@Role/@everyone>\n\n\n3\n\n\n\n\n\n\nsetnsfw\n\n\nChange NSFW allowance in a channel.\n\n\nsetnsfw \n<on/off>\n\n\n3\n\n\n\n\n\n\nsetstatus\n\n\nChange the bot's playing status.\n\n\nsetstatus \n<online/idle/dnd/invisible>\n \n<message>\n\n\nmaster\n\n\n\n\n\n\nsoftban\n\n\nBan and immediately unban a member, deleting their messages in the process.\n\n\nsoftban @User1 @User2/\n<userid/multiple-ids>\n \n<reason>\n\n\nBan Members\n\n\n\n\n\n\ntakerole\n\n\nTake a role from a user.\n\n\ntakerole @User \n<role name>\n\n\n3, Manage Roles\n\n\n\n\n\n\ntwitch\n\n\nReturn if a Twitch streamer is live or not.\n\n\n\n\n0\n\n\n\n\n\n\nuserinfo\n\n\nPrint info on a user.\n\n\n\n\n0\n\n\n\n\n\n\n\n\nFun commands\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nUsage\n\n\nLevel/Required permission\n\n\n\n\n\n\n\n\n\n\nadvice\n\n\nAsk for some advice from the bot.\n\n\n\n\n0\n\n\n\n\n\n\ncleverbot\n\n\nTalk to the bot, and it will respond.\n\n\ncleverbot \n<message>\n\n\n0\n\n\n\n\n\n\ndice\n\n\nRoll the dice.\n\n\n\n\n0\n\n\n\n\n\n\ndogfact\n\n\nReturn a random dog fact.\n\n\n\n\n0\n\n\n\n\n\n\ne621\n\n\nImage searching from e621.\n\n\ne621 \n<searchwords>\n\n\n0 (NSFW)\n\n\n\n\n\n\nfact\n\n\nReturn a random fact.\n\n\n\n\n0\n\n\n\n\n\n\nfancyinsult\n\n\nInsult someone in a fancy manner.\n\n\nfancyinsult \n<name>\n\n\n0\n\n\n\n\n\n\nfortunecow\n\n\nReturn a fortune cow.\n\n\n\n\n0\n\n\n\n\n\n\ngif\n\n\nSearch for a GIF.\n\n\ngif \n<searchwords>\n\n\n0\n\n\n\n\n\n\nleetspeak\n\n\nEncode a message to 1337sp3ak.\n\n\nleetspeak \n<message>\n\n\n0\n\n\n\n\n\n\nmagic8ball\n\n\nAsk for a decision from the magic 8 ball.\n\n\n\n\n0\n\n\n\n\n\n\nmeme\n\n\nMake a meme. \nMeme types here\n\n\nmeme \n<memetype>\n \n\"<Upper line>\"\n \n\"<Bottom line>\"\n\n\n0\n\n\n\n\n\n\nrandomcat\n\n\nReturn a random cat picture.\n\n\n\n\n0\n\n\n\n\n\n\nrandomdog\n\n\nReturn a random dog picture.\n\n\n\n\n0\n\n\n\n\n\n\nrandommeme\n\n\nReturn a random meme.\n\n\n\n\n0 (NSFW)\n\n\n\n\n\n\nrip\n\n\nPosts a ripme.xyz about someone.\n\n\nrip \n<name>\n\n\n0\n\n\n\n\n\n\nrule34\n\n\nSearch for an image via rule34.\n\n\nrule34 \n<searchwords>\n\n\n0 (NSFW)\n\n\n\n\n\n\nshorten\n\n\nShorten an URL using goo.gl.\n\n\nshorten \n<url>\n\n\n0\n\n\n\n\n\n\nstroke\n\n\nStroke someone's ego.\n\n\nstroke \n<name>\n\n\n0\n\n\n\n\n\n\nurbandictionary\n\n\nSearch for a definition from the Urban Dictionary.\n\n\nurbandictionary \n<searchwords>\n\n\n0\n\n\n\n\n\n\nxkcd\n\n\nSearch for XKCD comics. Use nothing for random, current for latest or a number to get that one.\n\n\nxkcd \n<(nothing)/current/(number)>\n\n\n0\n\n\n\n\n\n\nyesno\n\n\nReturn a yes or no GIF.\n\n\n\n\n0\n\n\n\n\n\n\nyomomma\n\n\nYo momma is so fat that... You know the drill.\n\n\n\n\n0\n\n\n\n\n\n\n\n\nMusic commands\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nUsage\n\n\nLevel/Required permission\n\n\n\n\n\n\n\n\n\n\nleave-voice\n\n\nLeave the voice channel.\n\n\n\n\n1\n\n\n\n\n\n\nmusic\n\n\nPause or resume music playing.\n\n\n\n\n1\n\n\n\n\n\n\nplaylist\n\n\nPrint the current playlist. If the delete subcommand is passed, remove a song from the playlist. Number specifies track to\n\n\nremove, all means queue wipe.\n\n\nplaylist \nOR\n playlist delete \n<position>/all\n\n\n\n\n\n\nrequest\n\n\nRequest a song to add to the playlist.\n\n\nrequest \n<url/searchwords>\n\n\n1\n\n\n\n\n\n\nshuffle\n\n\nShuffle the current playlist.\n\n\n\n\n2\n\n\n\n\n\n\nvoice\n\n\nMake the bot join the voice channel.\n\n\n\n\n1\n\n\n\n\n\n\nvolume\n\n\nAdjust player volume.\n\n\nvolume \n<0-100>\n\n\n1\n\n\n\n\n\n\nvoteskip\n\n\nVote to skip a song.\n\n\n\n\n1\n\n\n\n\n\n\n\n\nTag commands\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nUsage\n\n\nLevel/Required permission\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nBase command for tags. Returns a tag if specified.\n\n\ntag \n<subcommand/name>\n\n\n0 (Also subcommands)\n\n\n\n\n\n\ntag create\n\n\nCreate a tag.\n\n\ntag create \n<name>\n \n<content>\n\n\n\n\n\n\n\n\ntag delete\n\n\nDelete a tag.\n\n\ntag delete \n<name>\n\n\n\n\n\n\n\n\ntag edit\n\n\nEdit an existing tag.\n\n\ntag edit \n<name>\n \n<newcontent>\n\n\n\n\n\n\n\n\ntag owner\n\n\nReturn the owner of a tag.\n\n\ntag owner \n<name>\n\n\n\n\n\n\n\n\ntag random\n\n\nRetrieve a random tag from the database.\n\n\ntag random\n\n\n\n\n\n\n\n\ntag raw\n\n\nReturn the raw data of a tag.\n\n\ntag raw \n<name>\n\n\n\n\n\n\n\n\n\n\nCustomize command\n\n\nThe customize command is a multifaceted command that needs its own table to illustrate how it works.\n\n\nThe customize command makes changes to the server-specific database of WildBeast. It allows you to set a custom member join announcement and tweak some responses. You need a permission level of 3 to use the customize command.   \n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nUsage\n\n\nNote\n\n\n\n\n\n\n\n\n\n\ncustomize\n\n\nBase command for the customizer.\n\n\ncustomize \n<method>\n \n<parameter/content>\n\n\nSee below for the methods.\n\n\n\n\n\n\nprefix\n\n\nChange the command prefix. Enclose the prefix in double quotes.\n\n\ncustomize prefix \"\n<prefix>\n\"\n\n\n\n\n\n\n\n\npermissions\n\n\nChange response given when users don't have permissions to execute a command.\n\n\ncustomize permissions \n<message>\n\n\n\n\n\n\n\n\ntimeout\n\n\nChange response given when a command is still on cooldown.\n\n\ncustomize timeout \n<message>\n\n\n\n\n\n\n\n\nwelcoming\n\n\nChanges whether the bot should send a welcome message when a new member joins.\n\n\ncustomize welcoming \n<off/channel/private>\n\n\n\n\n\n\n\n\nwelcome\n\n\nChanges the welcome message specified above.\n\n\ncustomize welcome \n<message>\n\n\n\n\n\n\n\n\nnsfw\n\n\nChange the response given when a channel doesn't have NSFW commands allowed.\n\n\ncustomize nsfw \n<message>\n\n\n\n\n\n\n\n\nvolume\n\n\nChange the default volume WildBot will assume when joining a voice channel.\n\n\ncustomize volume \n<number>\n\n\n\n\n\n\n\n\n\n\nAll commands except for the option-based ones (\nwelcoming\n and \nprefix\n) support certain variables in the messages. The variables start with \n%\n and are the following.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nUsable responses\n\n\n\n\n\n\n\n\n\n\nuser\n\n\nUsername of the user that triggered the response.\n\n\nAll\n\n\n\n\n\n\nserver\n\n\nName of the server.\n\n\nAll\n\n\n\n\n\n\nchannel\n\n\nName of the channel the response was triggered in.\n\n\nAll except \nwelcome\n\n\n\n\n\n\ntimeout\n\n\nAmount of seconds the command is on cooldown.\n\n\nOnly \ntimeout\n\n\n\n\n\n\nulevel\n\n\nShort of user level, the user's current permission level.\n\n\nOnly \npermissions\n\n\n\n\n\n\nnlevel\n\n\nShort of need level, permission level required to execute the command.\n\n\nOnly \npermissions",
            "title": "Command reference"
        },
        {
            "location": "/commands/#command-reference",
            "text": "",
            "title": "Command reference"
        },
        {
            "location": "/commands/#general-commands",
            "text": "Name  Description  Usage  Level/Required permission      addrole  Add a role to a user.  addrole @User @User2  <role name>  3, Manage Roles    ban  Ban a user from the server.  ban  <days of messages to delete>  @User @User2  <reason>  Ban Members    colorrole  Change a role color to a hexadecimal value. Hashtag accepted but not required.  colorrole  <#FFFFFF/FFFFFF>   <role name>  3, Manage Roles    customize  Customize the bot's behavior in the server.  See the table at the bottom of the page.  3    eval  Evaluate JavaScript code.  eval  <code>  master    hackban  Ban a member that is not a member of the server (By ID).  hackban  <userid/multiple-ids>   <reason>  Ban Members    hello  Make the bot greet you.   0    info  Print information about the bot.   0    join-server  Return the OAuth URL for the bot.   0    kick  Kick a user from the server.  kick @User  <reason>  Kick Members    killswitch  Close the bot process.   master    leave-server  Leave a server.   3    namechanges  Detect name changes from a user.  namechanges @User  0    ping  Ping the bot to test responsiveness.   0    plaineval  Same as eval, just with a different scope.  plaineval  <code>  master    prefix  Make the bot return its current prefix.   0    purge  Delete a specified count of messages.  purge  <amount>  Manage Messages    rankup  Bump a user's permission level up by one notch.  rankup @User  3    say  Make the bot say something you specify.  say  <message>  0    server-info  Print information on the server.   0    setlevel  Set the level of a user or role.  setlevel  <-1/0/1/2/3>   <@User/@Role/@everyone>  3    setnsfw  Change NSFW allowance in a channel.  setnsfw  <on/off>  3    setstatus  Change the bot's playing status.  setstatus  <online/idle/dnd/invisible>   <message>  master    softban  Ban and immediately unban a member, deleting their messages in the process.  softban @User1 @User2/ <userid/multiple-ids>   <reason>  Ban Members    takerole  Take a role from a user.  takerole @User  <role name>  3, Manage Roles    twitch  Return if a Twitch streamer is live or not.   0    userinfo  Print info on a user.   0",
            "title": "General commands"
        },
        {
            "location": "/commands/#fun-commands",
            "text": "Name  Description  Usage  Level/Required permission      advice  Ask for some advice from the bot.   0    cleverbot  Talk to the bot, and it will respond.  cleverbot  <message>  0    dice  Roll the dice.   0    dogfact  Return a random dog fact.   0    e621  Image searching from e621.  e621  <searchwords>  0 (NSFW)    fact  Return a random fact.   0    fancyinsult  Insult someone in a fancy manner.  fancyinsult  <name>  0    fortunecow  Return a fortune cow.   0    gif  Search for a GIF.  gif  <searchwords>  0    leetspeak  Encode a message to 1337sp3ak.  leetspeak  <message>  0    magic8ball  Ask for a decision from the magic 8 ball.   0    meme  Make a meme.  Meme types here  meme  <memetype>   \"<Upper line>\"   \"<Bottom line>\"  0    randomcat  Return a random cat picture.   0    randomdog  Return a random dog picture.   0    randommeme  Return a random meme.   0 (NSFW)    rip  Posts a ripme.xyz about someone.  rip  <name>  0    rule34  Search for an image via rule34.  rule34  <searchwords>  0 (NSFW)    shorten  Shorten an URL using goo.gl.  shorten  <url>  0    stroke  Stroke someone's ego.  stroke  <name>  0    urbandictionary  Search for a definition from the Urban Dictionary.  urbandictionary  <searchwords>  0    xkcd  Search for XKCD comics. Use nothing for random, current for latest or a number to get that one.  xkcd  <(nothing)/current/(number)>  0    yesno  Return a yes or no GIF.   0    yomomma  Yo momma is so fat that... You know the drill.   0",
            "title": "Fun commands"
        },
        {
            "location": "/commands/#music-commands",
            "text": "Name  Description  Usage  Level/Required permission      leave-voice  Leave the voice channel.   1    music  Pause or resume music playing.   1    playlist  Print the current playlist. If the delete subcommand is passed, remove a song from the playlist. Number specifies track to  remove, all means queue wipe.  playlist  OR  playlist delete  <position>/all    request  Request a song to add to the playlist.  request  <url/searchwords>  1    shuffle  Shuffle the current playlist.   2    voice  Make the bot join the voice channel.   1    volume  Adjust player volume.  volume  <0-100>  1    voteskip  Vote to skip a song.   1",
            "title": "Music commands"
        },
        {
            "location": "/commands/#tag-commands",
            "text": "Name  Description  Usage  Level/Required permission      tag  Base command for tags. Returns a tag if specified.  tag  <subcommand/name>  0 (Also subcommands)    tag create  Create a tag.  tag create  <name>   <content>     tag delete  Delete a tag.  tag delete  <name>     tag edit  Edit an existing tag.  tag edit  <name>   <newcontent>     tag owner  Return the owner of a tag.  tag owner  <name>     tag random  Retrieve a random tag from the database.  tag random     tag raw  Return the raw data of a tag.  tag raw  <name>",
            "title": "Tag commands"
        },
        {
            "location": "/commands/#customize-command",
            "text": "The customize command is a multifaceted command that needs its own table to illustrate how it works.  The customize command makes changes to the server-specific database of WildBeast. It allows you to set a custom member join announcement and tweak some responses. You need a permission level of 3 to use the customize command.        Name  Description  Usage  Note      customize  Base command for the customizer.  customize  <method>   <parameter/content>  See below for the methods.    prefix  Change the command prefix. Enclose the prefix in double quotes.  customize prefix \" <prefix> \"     permissions  Change response given when users don't have permissions to execute a command.  customize permissions  <message>     timeout  Change response given when a command is still on cooldown.  customize timeout  <message>     welcoming  Changes whether the bot should send a welcome message when a new member joins.  customize welcoming  <off/channel/private>     welcome  Changes the welcome message specified above.  customize welcome  <message>     nsfw  Change the response given when a channel doesn't have NSFW commands allowed.  customize nsfw  <message>     volume  Change the default volume WildBot will assume when joining a voice channel.  customize volume  <number>      All commands except for the option-based ones ( welcoming  and  prefix ) support certain variables in the messages. The variables start with  %  and are the following.     Variable  Description  Usable responses      user  Username of the user that triggered the response.  All    server  Name of the server.  All    channel  Name of the channel the response was triggered in.  All except  welcome    timeout  Amount of seconds the command is on cooldown.  Only  timeout    ulevel  Short of user level, the user's current permission level.  Only  permissions    nlevel  Short of need level, permission level required to execute the command.  Only  permissions",
            "title": "Customize command"
        },
        {
            "location": "/custom_commands/",
            "text": "This is the cheat sheet for the WildBeast command framework. Using these elements, you can build the command you really want to get into your own instance.\n\n\n\n\nWhat not to do\n\n\nDo not come to us with questions on how to write custom commands, some basic JavaScript and programming knowledge is required. We won't give you assistance in writing your commands beyond what is listed on this page!\n\n\n\n\nIntro\n\n\nStarting at version 3.0.0, WildBeast allows for the addition of user created JavaScript files with commands, given that they are written in the exact same format as default files. This page provides you with the tools you need to create your own commands.\n\n\nImportant notes\n\n\n\n\nFiles need to declare commands to an array, and the array needs to be exported as \nCommands\n.\n\n\nIn practice: \nvar\n \nCommands\n \n=\n \n[]\n and \nexports\n.\nCommands\n \n=\n \nCommands\n\n\n\n\n\n\nYour command files must be in the \ncustom\n folder within the \ncommands\n folder. The path would therefore be \n~/WildBeast/runtime/commands/custom\n.\n\n\nCommands are \nobjects\n added to an \narray\n.\n\n\nAliases can't be shared between commands. This means that a custom command can't have the same alias as a default command. The bot will stop itself from running and spit out an error if this happens, for safety reasons.\n\n\nAny functions that use for instance config fields and so forth need to be imported in the format \n../../file.ext\n or \n../file.ext\n depending on what folder the file is in.\n\n\n\n\nProperty declaration\n\n\nCommand objects consist of different properties which define how the command runs. There are mandatory properties and optional properties, divided into their own lists. The command callback name is decided by the \n<cmdname>\n placeholder in \nCommands.<cmdname>\n.\n\n\nProperty scheme\n\n\nMandatory properties\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nCommand name for the help module, \nnot\n callback name! See above.\n\n\n\n\n\n\nhelp\n\n\nString\n\n\nMessage displayed when \nhelp <command>\n is called on the command.\n\n\n\n\n\n\nlevel\n\n\nString\n / \nNumber\n\n\nMinimum user access level (0-3 int) required to execute this command. Set to \n'master'\n to restrict usage to config-defined master users.\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nDefines the JavaScript function to execute when the command is called.\n\n\n\n\n\n\n\n\nOptional properties\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnoDM\n\n\nBoolean\n\n\nWhether to allow usage in direct messages. Default true.\n\n\n\n\n\n\ntimeout\n\n\nNumber\n\n\nUnsigned integer that defines how long a command will be on timeout before it's usable again. The number represents seconds.\n\n\n\n\n\n\nusage\n\n\nString\n\n\nThe example of how the command is used when \nhelp <command>\n is called on the command.\n\n\n\n\n\n\noverwrite\n\n\nBoolean\n\n\nWhether to accept this command instead of the default one, in case the callback name is the same. Default false.\n\n\n\n\n\n\naliases\n\n\nArray\n<\nString\n>\n\n\nHardcoded aliases to call this command with in addition to the default callback name.\n\n\n\n\n\n\nhidden\n\n\nBoolean\n\n\nWhether to hide the command from the command list returned with \nhelp\n. Default false.\n\n\n\n\n\n\n\n\nExample structure\n\n\nSimple command example:\n\n\nvar\n \nCommands\n \n=\n \n[]\n \n// Declaration of the command array\n\n\n\nCommands\n.\nping\n \n=\n \n{\n\n  \nname\n:\n \n'ping'\n,\n\n  \nhelp\n:\n \n'Check if I still live.'\n\n  \ntimeout\n:\n \n10\n,\n\n  \noverwrite\n:\n \ntrue\n,\n \n// WildBeast already has a command called ping, will overwrite with this\n\n  \naliases\n:\n \n[\n'pong'\n],\n\n  \nlevel\n:\n \n0\n,\n\n  \nfn\n:\n \nfunction\n(\nmsg\n)\n \n{\n\n    \nmsg\n.\nchannel\n.\nsendMessage\n(\n'I LIVE'\n)\n\n  \n}\n\n\n}\n\n\n\nexports\n.\nCommands\n \n=\n \nCommands\n \n// Expose the commands to the commandcontrol module\n\n\n\n\n\n\nExample of command that uses an external module:\n\n\nvar\n \nCommands\n \n=\n \n[]\n \n// Declaration of the command array\n\n\nvar\n \nconfig\n \n=\n \nrequire\n(\n'../../../config.json'\n)\n \n// Import config\n\n\n\nCommands\n.\nprefix\n \n=\n \n{\n\n  \nname\n:\n \n'prefix'\n,\n\n  \nhelp\n:\n \n'Ask the bot what the configured prefix is.'\n\n  \ntimeout\n:\n \n30\n,\n\n  \noverwrite\n:\n \ntrue\n,\n\n \u00a0\nlevel\n:\n \n'master'\n,\n\n  \nfn\n:\n \nfunction\n(\nmsg\n)\n \n{\n\n    \nmsg\n.\nchannel\n.\nsendMessage\n(\n'My prefix is '\n \n+\n \nconfig\n.\nprefix\n)\n\n  \n}\n\n\n}\n\n\n\nexports\n.\nCommands\n \n=\n \nCommands\n \n// Expose the commands to the commandcontrol module\n\n\n\n\n\n\nAnd that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!",
            "title": "Custom commands"
        },
        {
            "location": "/custom_commands/#intro",
            "text": "Starting at version 3.0.0, WildBeast allows for the addition of user created JavaScript files with commands, given that they are written in the exact same format as default files. This page provides you with the tools you need to create your own commands.",
            "title": "Intro"
        },
        {
            "location": "/custom_commands/#important-notes",
            "text": "Files need to declare commands to an array, and the array needs to be exported as  Commands .  In practice:  var   Commands   =   []  and  exports . Commands   =   Commands    Your command files must be in the  custom  folder within the  commands  folder. The path would therefore be  ~/WildBeast/runtime/commands/custom .  Commands are  objects  added to an  array .  Aliases can't be shared between commands. This means that a custom command can't have the same alias as a default command. The bot will stop itself from running and spit out an error if this happens, for safety reasons.  Any functions that use for instance config fields and so forth need to be imported in the format  ../../file.ext  or  ../file.ext  depending on what folder the file is in.",
            "title": "Important notes"
        },
        {
            "location": "/custom_commands/#property-declaration",
            "text": "Command objects consist of different properties which define how the command runs. There are mandatory properties and optional properties, divided into their own lists. The command callback name is decided by the  <cmdname>  placeholder in  Commands.<cmdname> .",
            "title": "Property declaration"
        },
        {
            "location": "/custom_commands/#property-scheme",
            "text": "Mandatory properties     Property  Type  Description      name  String  Command name for the help module,  not  callback name! See above.    help  String  Message displayed when  help <command>  is called on the command.    level  String  /  Number  Minimum user access level (0-3 int) required to execute this command. Set to  'master'  to restrict usage to config-defined master users.    fn  Function  Defines the JavaScript function to execute when the command is called.     Optional properties     Property  Type  Description      noDM  Boolean  Whether to allow usage in direct messages. Default true.    timeout  Number  Unsigned integer that defines how long a command will be on timeout before it's usable again. The number represents seconds.    usage  String  The example of how the command is used when  help <command>  is called on the command.    overwrite  Boolean  Whether to accept this command instead of the default one, in case the callback name is the same. Default false.    aliases  Array < String >  Hardcoded aliases to call this command with in addition to the default callback name.    hidden  Boolean  Whether to hide the command from the command list returned with  help . Default false.",
            "title": "Property scheme"
        },
        {
            "location": "/custom_commands/#example-structure",
            "text": "Simple command example:  var   Commands   =   []   // Declaration of the command array  Commands . ping   =   { \n   name :   'ping' , \n   help :   'Check if I still live.' \n   timeout :   10 , \n   overwrite :   true ,   // WildBeast already has a command called ping, will overwrite with this \n   aliases :   [ 'pong' ], \n   level :   0 , \n   fn :   function ( msg )   { \n     msg . channel . sendMessage ( 'I LIVE' ) \n   }  }  exports . Commands   =   Commands   // Expose the commands to the commandcontrol module   Example of command that uses an external module:  var   Commands   =   []   // Declaration of the command array  var   config   =   require ( '../../../config.json' )   // Import config  Commands . prefix   =   { \n   name :   'prefix' , \n   help :   'Ask the bot what the configured prefix is.' \n   timeout :   30 , \n   overwrite :   true , \n \u00a0 level :   'master' , \n   fn :   function ( msg )   { \n     msg . channel . sendMessage ( 'My prefix is '   +   config . prefix ) \n   }  }  exports . Commands   =   Commands   // Expose the commands to the commandcontrol module   And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!",
            "title": "Example structure"
        },
        {
            "location": "/tagscript/",
            "text": "Since version 4.0.0 WildBeast has been using \nTagScript\n in conjunction with the \ntag\n command. This document will give you a brief rundown of how to use TagScript (From now on referred to as TS) to add some spice to your otherwise run-of-the-mill tags.\n\n\nIntro\n\n\nBase format\n\n\nThe base format for TS elements is \n{datapoint;expression}\n where \ndatapoint\n is one of the below, and \nexpression\n is the expression passed to the datapoint for parsing. Multi-parameter expressions are delimited by semicolons (\n{datapoint;exp1;exp2;exp3}\n).\n\n\nDatapoints\n\n\n\n\n\n\n\n\nDatapoint\n\n\nInfo\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nmath\n\n\nParse a mathematical expression.\n\n\n{math;3*3}\n\n\n\n\n\n\nchoose\n\n\nRandomly choose one of the options passed.\n\n\n{choose;yes;no;maybe}\n\n\n\n\n\n\nrange\n\n\nRandomly pick a number in a range between \nmin\n and \nmax\n.\n\n\n{range;1;10}\n\n\n\n\n\n\nrandstr\n\n\nGenerate a random string using the passed characters and length.\n\n\n{randstr;AaBb1234;10\n\n\n\n\n\n\nlower\n\n\nConvert the passed string to lowercase.\n\n\n{lower;THIS}\n\n\n\n\n\n\nupper\n\n\nConvert the passed string to uppercase.\n\n\n{upper;this}\n\n\n\n\n\n\nlength\n\n\nReturn the length of the passed expression.\n\n\n{length;owowhatsthis}\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nWildBeast only uses internal TS datapoints as of the time of writing. Custom datapoints may be added in the future, this document will be updated accordingly if that becomes apparent.\n\n\n\n\n\n\nDatapoints missing?\n\n\nNot all datapoints are described here. This is due to them being irrelevant to the command entirely or not being usable for you.\n\n\n\n\nIntegrating TagScript into tags\n\n\nYou can pass TS expressions to \ntag create\n or \ntag edit\n and they will evaluate & return values automatically when the tag is called with \ntag\n. Given that you formatted it correctly, that is.\n\n\nPractical example: I want WildBot to choose a place for me to visit in Europe. I create the following tag:\n\n\n++tag create europeplace {choose;Eiffel Tower;Brandenburger Gate;London Eye}\n\n\n\n\n\nWhen I call the tag with \n++tag europeplace\n, it will give me one of the options I passed.\n\n\n\n\nIn this case, it chose the Brandenburger Gate!\n\n\nConclusion\n\n\nAnd that, in a nutshell, is how you can use TagScript to make your tags a little more dynamic. Have fun tinkering with it!",
            "title": "Tag scripting"
        },
        {
            "location": "/tagscript/#intro",
            "text": "",
            "title": "Intro"
        },
        {
            "location": "/tagscript/#base-format",
            "text": "The base format for TS elements is  {datapoint;expression}  where  datapoint  is one of the below, and  expression  is the expression passed to the datapoint for parsing. Multi-parameter expressions are delimited by semicolons ( {datapoint;exp1;exp2;exp3} ).",
            "title": "Base format"
        },
        {
            "location": "/tagscript/#datapoints",
            "text": "Datapoint  Info  Example      math  Parse a mathematical expression.  {math;3*3}    choose  Randomly choose one of the options passed.  {choose;yes;no;maybe}    range  Randomly pick a number in a range between  min  and  max .  {range;1;10}    randstr  Generate a random string using the passed characters and length.  {randstr;AaBb1234;10    lower  Convert the passed string to lowercase.  {lower;THIS}    upper  Convert the passed string to uppercase.  {upper;this}    length  Return the length of the passed expression.  {length;owowhatsthis}      Note  WildBeast only uses internal TS datapoints as of the time of writing. Custom datapoints may be added in the future, this document will be updated accordingly if that becomes apparent.    Datapoints missing?  Not all datapoints are described here. This is due to them being irrelevant to the command entirely or not being usable for you.",
            "title": "Datapoints"
        },
        {
            "location": "/tagscript/#integrating-tagscript-into-tags",
            "text": "You can pass TS expressions to  tag create  or  tag edit  and they will evaluate & return values automatically when the tag is called with  tag . Given that you formatted it correctly, that is.  Practical example: I want WildBot to choose a place for me to visit in Europe. I create the following tag:  ++tag create europeplace {choose;Eiffel Tower;Brandenburger Gate;London Eye}  When I call the tag with  ++tag europeplace , it will give me one of the options I passed.   In this case, it chose the Brandenburger Gate!",
            "title": "Integrating TagScript into tags"
        },
        {
            "location": "/tagscript/#conclusion",
            "text": "And that, in a nutshell, is how you can use TagScript to make your tags a little more dynamic. Have fun tinkering with it!",
            "title": "Conclusion"
        },
        {
            "location": "/install_windows/",
            "text": "Welcome to the installation guide for WildBeast on Windows! In this guide, we'll walk you through the installation and deployment process for WildBeast on Windows.\n\n\nPrerequisites\n\n\n\n\nWindows system\n\n\nMost Windows systems can run this bot fine, unless you have a really low-end laptop\n\n\nOS: Windows 7 and up\n\n\nAdministrator access to the computer\n\n\n\n\n\n\nPrograms\n\n\nWe will be installing programs that are directly related to the bot later on\n\n\nThese programs are required pre-setup:\n\n\nA code editor, i.e. \nNotepad++\n or \nAtom\n or \nBrackets\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\n\n\nNote\n\n\nQuite a few steps in this guide will be using administrative permissions. Therefore we recommend that you are logged into an administrator account to not have to type the admin password every time you perform something.\n\n\n\n\nInstalling Node\n\n\nGo to \nthe Node.js download page\n and download the version relevant to your OS bit version. It's pretty straight forward, just make sure that the features tab looks like this.\n\n\n\n\nWhen that's installed, it's time to retrieve the WB repository.\n\n\nInstalling Git and retrieving WildBeast\n\n\nNext we'll install Git to be able to download WildBeast. Start off by going to \nthe Git download page\n and download the Windows installer.\n\n\n\n\nDanger\n\n\nThe installation process of Git has to go exactly as described below, otherwise you will have to take longer ways around!\n\n\n\n\nOnce downloaded, run the installer. Read the license and continue. Once you get to the component selection, check that it looks like the image below.\n\n\n\n\nAfter selecting the start menu folder, this is where things get precise. \nTick the boxes exactly as follows!\n\n\n\n\n\n\n\n\n\n\nIn text:\n\n\nUse Git from the Windows Command Prompt\n\n\nCheckout Windows-style, commit Unix-style endings\n\n\nUse OpenSSH\n\n\nUse MinTTY (the default terminal MSYS2)\n  \n\n\nIf you followed through correctly, you've got Git set up in a way that allows you to perform setup and future maintenance without hitches.\n\n\nNow, you'd want to figure out where you want the bot to be downloaded. Something simple where you can find it is good, AKA not in the system internals (Possibly some other drive, though \nNOT A FLASH DRIVE\n) or optionally your Desktop could be fine. When you've found the location of your choice, Shift+Right Click in that particular location and select \"Open command window here\". Then clone the WildBeast Git repository with \ngit clone https://github.com/TheSharks/WildBeast.git \n&&\n \ncd\n WildBeast\n.\n\n\n\n\nWhy download with Git\n\n\nWe're instructing you to use Git for downloading WildBeast to make future updating processes easier. If you were to download the ZIP package, you'd need to redownload it every time you want to update. For more info, see \nUpdating\n.\n\n\n\n\nLet the clone process complete. When it's done, you've downloaded WildBeast successfully.\n\n\nInstalling Python 2.7.12\n\n\nFrom WildBeast version 4.0.0 onwards, the \nfibers\n package is used in the bot. This package requires Python 2.7 to install, and hence we will also install that.\n\n\nClick here\n to directly download the Python 2.7 installer. (Official source from python.org)\n\n\nOpen the installer. Other options don't matter that much, but these two screens are crucial to have \nexactly as follows!\n\n\n\n\n\n\nIt is particularly important that you have all the boxes described in the latter image ticked in order for Python 2.7 to work properly. Once you have completed this, proceed to the next step.\n\n\n\n\nNote to users with existing Python 3.5 installations\n\n\nThe PATH variable \npython\n will be duplicated in this process. To distinguish what refers to which Python version you can browse to either Python installation directory (2.7 or 3.5) and rename \npython.exe\n to for instance \npython2\n or \npython3\n and so forth.\n\n\n\n\nInstalling the Node dependencies\n\n\nNow it's time to install the Node dependencies for the bot. Open a command prompt in the WildBeast folder (Shift+Right click) and select \"Open command window here\". Run \nnpm install\n and wait for the process to complete.\n\n\n\n\nIssues with npm install\n\n\nIf you get errors that say \nWARN\n and use  yellow text, you can ignore them. If you however start getting red text, there might be a problem installing.\n\n\nCheck that the WildBeast directory does not require administrator permissions to execute commands in. You may come and ask us \nover at WildBot's Territory\n if you need help fixing these errors.\n\n\n\n\nNode-gyp and npm install\n\n\nThe \nfibers\n package requires node-gyp to build. Node-gyp may fail on building of \nfibers\n if a GCC compiler isn't installed on the system. If you get an error that resembles to the one below, you are having this issue.\n\n\ngyp ERR! build error\ngyp ERR! stack Error: C:\n\\W\nindows\n\\M\nicrosoft.NET\n\\F\nramework\n\\v\n4\n.0.30319\n\\m\nsbuild.exe failed with \nexit\n code: \n1\n\ngyp ERR! stack     at ChildProcess.onExit \n(\nC:\n\\P\nrogram Files\n\\n\nodejs\n\\n\node_modules\n\\n\npm\n\\n\node_modules\n\\n\node-gyp\n\\l\nib\n\\b\nuild.js:276:23\n)\n\ngyp ERR! stack     at emitTwo \n(\nevents.js:106:13\n)\n\ngyp ERR! stack     at ChildProcess.emit \n(\nevents.js:194:7\n)\n\ngyp ERR! stack     at Process.ChildProcess._handle.onexit \n(\ninternal/child_process.js:215:12\n)\n\ngyp ERR! System Windows_NT \n10\n.0.14393\ngyp ERR! \ncommand\n \n\"C:\\Program Files\\nodejs\\node.exe\"\n \n\"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js\"\n \n\"rebuild\"\n \n\"--release\"\n\ngyp ERR! cwd %WildBeastDirectory%\n\\n\node_modules\n\\f\nibers\ngyp ERR! node -v %NodeVersion%\ngyp ERR! node-gyp -v %Node-gypVersion%\ngyp ERR! not ok\n\n\n\n\n\nTo fix this, open an administrative command prompt (Start Menu -> Type 'cmd' -> Right click and Run as administrator) and run \nnpm install --global --production windows-build-tools\n. After that do \nnpm install\n again.\n\n\nInstalling RethinkDB and creating the DB\n\n\nAs of WildBeast version 4.0.0, the bot uses RethinkDB to store server-specific data. This includes server owner, customize options and a whole bunch of other things.\n\n\n\n\nWarning\n\n\nDo not change RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can fix it yourself in case you mess up.\n\n\n\n\nClick \nthis link\n to download the RethinkDB binary. (Official download, again)\n\n\nWhen the file has downloaded, extract rethinkdb.exe to the WildBeast directory. This makes it easier to store all data in one place. In the WildBeast directory, run rethinkdb.exe. The RethinkDB server will start. When the output resembles to the one displayed below, you're good to go.\n\n\n\n\nWarning\n\n\nRemember to leave the RethinkDb window open or the database server will shut down!\n\n\n\n\n\n\nConfiguration\n\n\nFind \nconfig.example.json\n on your PC and open it using Notepad++ or any other code editor.\n\n\n\n\nWhat not to do\n\n\nDon't open the file with Windows Notepad. This will cause a bucketload of issues that just complicate the install process. Use a modern text editor like \nNotepad++\n.\n\n\n\n\nThe config file\n\n\nWhen opening the config file, you should have a file that looks like the \nexample config\n.\n\n\nWe'll now walk you through the different sections in the config and what they do.\n\n\nBot section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nOAuth token for the bot.\n\n\nString\n\n\n\n\n\n\noauth\n\n\nThe OAuth URL for the bot.\n\n\nString\n\n\n\n\n\n\n\n\nDatabase section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nPoints to WildBeast's database, localhost by default.\n\n\nString\n\n\n\n\n\n\nport\n\n\nSpecifies which network port the RethinkDB server is running on.\n\n\nNumber\n\n\n\n\n\n\npassword\n\n\nPassword to RethinkDB user.\n\n\nString\n\n\n\n\n\n\nuser\n\n\nRethinkDB user account to use for accessing the database.\n\n\nString\n\n\n\n\n\n\n\n\nSettings section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\nThe command prefix the bot will use.\n\n\nString\n\n\n\n\n\n\nautodeletemsg\n\n\nAutomatically delete music-related messages after a while.\n\n\nBoolean\n\n\n\n\n\n\ndeleteTimeout\n\n\nThe amount of time after which to delete the messages.\n\n\nNumber\n\n\n\n\n\n\ndeleteTimeoutLong\n\n\nSame as above, but for messages that have a longer timeout.\n\n\nNumber\n\n\n\n\n\n\nmaxvcslots\n\n\nHow many concurrent voice connections the bot can have until it won't join more.\n\n\nNumber\n\n\n\n\n\n\n\n\nBezerk section\n\n\n\n\nWarning\n\n\nDo not modify any of these settings! They're for internal use only.\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nuse\n\n\nWhether Bezerk shall be used or not.\n\n\nBoolean\n\n\n\n\n\n\nuri\n\n\nSpecifies the websocket address for the Bezerk server.\n\n\nString\n\n\n\n\n\n\n\n\nElasticsearch section\n\n\n\n\nWarning\n\n\nDo not modify any of these settings! They're for internal use only.\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nuse\n\n\nWhether Elastic shall be used or not.\n\n\nBoolean\n\n\n\n\n\n\nclient/host\n\n\nSpecifies the address for the Elastic server.\n\n\nString\n\n\n\n\n\n\n\n\nPermissions section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nThe highest possible access level of Infinity. Full permissions.\n\n\nArray\n<\nString\n>\n\n\n\n\n\n\nlevel1, level2, level3\n\n\nSettable access levels that give users access to certain commands.\n\n\nArray\n<\nString\n>\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nBy default, when WildBeast joins a server it will set the owner's access level to 4. This is to give them control over normal users.\n\n\n\n\nAPI keys section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nimgflip\n\n\nYour \nimgflip\n login details.\n\n\nString\n\n\n\n\n\n\ngoogle\n\n\nFor retrieving data from YouTube.\n\n\nString\n\n\n\n\n\n\ntwitchId\n\n\nFor retrieving status of whether a user on Twitch is streaming or not.\n\n\nString\n\n\n\n\n\n\nimgur\n\n\nFor retrieving random memes from Imgur.\n\n\nString\n\n\n\n\n\n\ncleverbot_user\n\n\nUsername to the cleverbot.io API, used in the cleverbot command.\n\n\nString\n\n\n\n\n\n\ncleverbot_key\n\n\nKey to the cleverbot.io API, used in the cleverbot command.\n\n\nString\n\n\n\n\n\n\n\n\nMaking the config\n\n\n\n\nOAuth app\n\n\nWe'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.\n\n\nGo to \nthe Discord Developer dashboard\n and create a new application.\n\n\nName it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".\n\n\nNow you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.\n\n\nHere you'll get a Client ID and a token. Reveal the token (\nNot the secret\n) and replace \"Bot token\" with that in the config.\n\n\n\n\n\n\nNext we'll make an OAuth URL for the bot so it can be added to the server.\n\n\nJust put this placeholder URL somewhere for now, \ndon't open it as it will not work\n.\n\nhttps://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655\n\n\nGo back to the app page, and copy the Client ID.\n\n\nReplace the \nCLIENTID\n placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.\n\n\nIf the URL works as intended, copy it and replace \"Bot OAuth URL (...)\" in the config with the one you copied.\n\n\nYou can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the \npermissions\n property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.\n\n\nIf you can't select your server, it might be that you lack Manage Server permissions.\n\n\n\n\n\n\n\n\n\n\nPrefix and other settings\n\n\nSetting the command prefix isn't really rocket science. This can be any special character, for instance \n%\n, \n&\n and so forth.\n\n\nYou can also use multiple characters as a prefix, for instance \n!!\n and \n//\n. Avoid common single-character prefixes like \n!\n and \n/\n to avoid initial prefix conflicts. These can however be resolved with \ncustomize\n and changing the prefix for the server.\n\n\nNote that there is always a so-called global prefix: A mention. Saying \n@BotName\n in chat will function as a prefix as well. \nThis needn't be specified in the config as it's always active.\n\n\n\n\n\n\nThe rest of the options are straightforward. \nautodeletemsg\n can be true or false, the message deletion times can be whatever you fancy in milliseconds and \nmaxvcslots\n is just a number.\n\n\nPermissions\n\n\nThis is a section that has a very interesting gimmick to it.\n\n\nWildBeast has a command named \nsetlevel\n which will set the level of a user. \nHowever\n, that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.\n\n\nThe permissions fields here are so-called \nglobal permissions\n, and will apply unless a server-specific level is set.\n\n\nUse this to add technicians and others who need permissions regardless of where the bot is.\n\n\n\n\n\n\nYou can specify users here by adding their IDs into the fields. Only the master field is mandatory.\n\n\nYou can get the ID of a user by either \"backlash mentioning\" them, which means to say typing \n\\@User\n in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.\n\n\nRemember to follow the example syntax in the master field when adding multiple users!\n\n\n\n\n\n\n\n\n\n\nAPI keys\n\n\nGeneral notice: Anything within these fields is sensitive and could do much harm if revealed to the public. \nTherefore it is imperative that you keep this to yourself.\n WildBeast maintainers will \nNEVER\n ask for your login details or API keys. Only show the options to trusted WildBeast maintainers in WildBot's Territory.\n\n\nimgflip\n\n\nThe procedure for getting this isn't tricky. Just go to \nhttps://imgflip.com\n, create an account and input your username and password into the fields.\n\n\n\n\n\n\nGoogle\n\n\nThis API is used to retrieve data from YouTube, related to music playback.\n\n\nGo to \nhttps://console.developers.google.com\n and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.\n\n\nWait a while as the project is being created.\n\n\nWhen the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".\n\n\nThis will take you to the API library. Select \"YouTube Data API\" as highlighted below.\n\n\n\nWhen the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create credentials. That's exactly what we will do.\n\n\nClick the \"Go to credentials\" button. In the next dropdowns, make them look like following.\n\n\n\nHit \"What credentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.\n\n\n\n\n\n\n\n\n\n\nTwitch\n\n\nThis API is used with the \ntwitch\n command. This will be the client ID the bot passes to Twitch when retrieving stream status.\n\n\nGo to the \nTwitch Connections page\n, scroll down to the bottom and click \"Register new application\".\n\n\nFill in the fields. Name should be your app name, and set the Redirect URI to \nhttp://localhost\n unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.\n\n\n\nClick \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".\n\n\n\nCopy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.\n\n\n\n\n\n\n\n\n\n\nImgur\n\n\nThis API is used in conjuction with the \nrandommeme\n command to pull random memes from Imgur.\n\n\nGo to the \nImgur App Registration\n.\n\n\nFill in the application name you prefer to use. Set Authorization type to \"Anonymous usage without user authentication\" as no further auth will be needed for pulling memes.\n\n\nFill in the email you fancy to receive notifications about this app in.\n\n\nDescription... Well, anything you find useful there.\n\n\nYou should end up with the below view.\n\n\n\nSolve the CAPTCHA and hit \"Submit\" on the bottom of the page. This will take you to the page where you can see your client ID and secret.\n\n\n\nCopy the Client ID and replace the \"A Imgur Client-ID\" placeholder with that value.\n\n\n\n\n\n\n\n\n\n\nCleverbot\n\n\nThis API is used in conjunction with the \ncleverbot\n command to do cleverbot discussions.\n\n\nGo to \ncleverbot.io\n and login to get your API user and key.\n\n\nAfter logging in, copy the contents of the \"API User\" and \"API Key\" fields and paste them into the appropriate fields in the config, API User to cleverbot_user and API Key to cleverbot_key.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat's all, your config should now be ready to rock! Save it as \nconfig.json\n.\n\n\n\n\nWarning\n\n\nDon't save the file as \nconfig.example.json\n as the bot will error if you do. Don't hit Ctrl+S, hit Ctrl+Alt+S!\n\n\n\n\nRunning the bot\n\n\nCongratulations, your WildBeast instance should be ready to launch!\n\n\nWildBeast has a system built in to create the required databases and tables for you without extra effort. To do this, run \nnpm run-script dbcreate\n in the WildBeast directory.\n\n\nWhen this has finished, it will tell you if the necessary database and tables have been created or already existed. To test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.\n\n\nRun \nnode DougBot.js\n in the bot's root directory to start it. If the bot runs without any errors, you have had success so far!\n\n\nYou can test simple functionality by running the \nping\n command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations, \nyou have successfully set up WildBeast!\n\n\nAnd that's it! You are now ready to start using your very own WildBeast instance!\n\n\nKeep in mind, if you have further questions or need help, we're around over at our official server! Link below.\n\n\nOn the behalf of the WildBeast team, \nwe hope you enjoy your bot!",
            "title": "Windows installation"
        },
        {
            "location": "/install_windows/#prerequisites",
            "text": "Windows system  Most Windows systems can run this bot fine, unless you have a really low-end laptop  OS: Windows 7 and up  Administrator access to the computer    Programs  We will be installing programs that are directly related to the bot later on  These programs are required pre-setup:  A code editor, i.e.  Notepad++  or  Atom  or  Brackets",
            "title": "Prerequisites"
        },
        {
            "location": "/install_windows/#installation",
            "text": "Note  Quite a few steps in this guide will be using administrative permissions. Therefore we recommend that you are logged into an administrator account to not have to type the admin password every time you perform something.",
            "title": "Installation"
        },
        {
            "location": "/install_windows/#installing-node",
            "text": "Go to  the Node.js download page  and download the version relevant to your OS bit version. It's pretty straight forward, just make sure that the features tab looks like this.   When that's installed, it's time to retrieve the WB repository.",
            "title": "Installing Node"
        },
        {
            "location": "/install_windows/#installing-git-and-retrieving-wildbeast",
            "text": "Next we'll install Git to be able to download WildBeast. Start off by going to  the Git download page  and download the Windows installer.   Danger  The installation process of Git has to go exactly as described below, otherwise you will have to take longer ways around!   Once downloaded, run the installer. Read the license and continue. Once you get to the component selection, check that it looks like the image below.   After selecting the start menu folder, this is where things get precise.  Tick the boxes exactly as follows!      In text:  Use Git from the Windows Command Prompt  Checkout Windows-style, commit Unix-style endings  Use OpenSSH  Use MinTTY (the default terminal MSYS2)     If you followed through correctly, you've got Git set up in a way that allows you to perform setup and future maintenance without hitches.  Now, you'd want to figure out where you want the bot to be downloaded. Something simple where you can find it is good, AKA not in the system internals (Possibly some other drive, though  NOT A FLASH DRIVE ) or optionally your Desktop could be fine. When you've found the location of your choice, Shift+Right Click in that particular location and select \"Open command window here\". Then clone the WildBeast Git repository with  git clone https://github.com/TheSharks/WildBeast.git  &&   cd  WildBeast .   Why download with Git  We're instructing you to use Git for downloading WildBeast to make future updating processes easier. If you were to download the ZIP package, you'd need to redownload it every time you want to update. For more info, see  Updating .   Let the clone process complete. When it's done, you've downloaded WildBeast successfully.",
            "title": "Installing Git and retrieving WildBeast"
        },
        {
            "location": "/install_windows/#installing-python-2712",
            "text": "From WildBeast version 4.0.0 onwards, the  fibers  package is used in the bot. This package requires Python 2.7 to install, and hence we will also install that.  Click here  to directly download the Python 2.7 installer. (Official source from python.org)  Open the installer. Other options don't matter that much, but these two screens are crucial to have  exactly as follows!    It is particularly important that you have all the boxes described in the latter image ticked in order for Python 2.7 to work properly. Once you have completed this, proceed to the next step.   Note to users with existing Python 3.5 installations  The PATH variable  python  will be duplicated in this process. To distinguish what refers to which Python version you can browse to either Python installation directory (2.7 or 3.5) and rename  python.exe  to for instance  python2  or  python3  and so forth.",
            "title": "Installing Python 2.7.12"
        },
        {
            "location": "/install_windows/#installing-the-node-dependencies",
            "text": "Now it's time to install the Node dependencies for the bot. Open a command prompt in the WildBeast folder (Shift+Right click) and select \"Open command window here\". Run  npm install  and wait for the process to complete.   Issues with npm install  If you get errors that say  WARN  and use  yellow text, you can ignore them. If you however start getting red text, there might be a problem installing.  Check that the WildBeast directory does not require administrator permissions to execute commands in. You may come and ask us  over at WildBot's Territory  if you need help fixing these errors.",
            "title": "Installing the Node dependencies"
        },
        {
            "location": "/install_windows/#node-gyp-and-npm-install",
            "text": "The  fibers  package requires node-gyp to build. Node-gyp may fail on building of  fibers  if a GCC compiler isn't installed on the system. If you get an error that resembles to the one below, you are having this issue.  gyp ERR! build error\ngyp ERR! stack Error: C: \\W indows \\M icrosoft.NET \\F ramework \\v 4 .0.30319 \\m sbuild.exe failed with  exit  code:  1 \ngyp ERR! stack     at ChildProcess.onExit  ( C: \\P rogram Files \\n odejs \\n ode_modules \\n pm \\n ode_modules \\n ode-gyp \\l ib \\b uild.js:276:23 ) \ngyp ERR! stack     at emitTwo  ( events.js:106:13 ) \ngyp ERR! stack     at ChildProcess.emit  ( events.js:194:7 ) \ngyp ERR! stack     at Process.ChildProcess._handle.onexit  ( internal/child_process.js:215:12 ) \ngyp ERR! System Windows_NT  10 .0.14393\ngyp ERR!  command   \"C:\\Program Files\\nodejs\\node.exe\"   \"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js\"   \"rebuild\"   \"--release\" \ngyp ERR! cwd %WildBeastDirectory% \\n ode_modules \\f ibers\ngyp ERR! node -v %NodeVersion%\ngyp ERR! node-gyp -v %Node-gypVersion%\ngyp ERR! not ok  To fix this, open an administrative command prompt (Start Menu -> Type 'cmd' -> Right click and Run as administrator) and run  npm install --global --production windows-build-tools . After that do  npm install  again.",
            "title": "Node-gyp and npm install"
        },
        {
            "location": "/install_windows/#installing-rethinkdb-and-creating-the-db",
            "text": "As of WildBeast version 4.0.0, the bot uses RethinkDB to store server-specific data. This includes server owner, customize options and a whole bunch of other things.   Warning  Do not change RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can fix it yourself in case you mess up.   Click  this link  to download the RethinkDB binary. (Official download, again)  When the file has downloaded, extract rethinkdb.exe to the WildBeast directory. This makes it easier to store all data in one place. In the WildBeast directory, run rethinkdb.exe. The RethinkDB server will start. When the output resembles to the one displayed below, you're good to go.   Warning  Remember to leave the RethinkDb window open or the database server will shut down!",
            "title": "Installing RethinkDB and creating the DB"
        },
        {
            "location": "/install_windows/#configuration",
            "text": "Find  config.example.json  on your PC and open it using Notepad++ or any other code editor.   What not to do  Don't open the file with Windows Notepad. This will cause a bucketload of issues that just complicate the install process. Use a modern text editor like  Notepad++ .",
            "title": "Configuration"
        },
        {
            "location": "/install_windows/#the-config-file",
            "text": "When opening the config file, you should have a file that looks like the  example config .  We'll now walk you through the different sections in the config and what they do.",
            "title": "The config file"
        },
        {
            "location": "/install_windows/#bot-section",
            "text": "Property  Explanation  Type      token  OAuth token for the bot.  String    oauth  The OAuth URL for the bot.  String",
            "title": "Bot section"
        },
        {
            "location": "/install_windows/#database-section",
            "text": "Property  Explanation  Type      host  Points to WildBeast's database, localhost by default.  String    port  Specifies which network port the RethinkDB server is running on.  Number    password  Password to RethinkDB user.  String    user  RethinkDB user account to use for accessing the database.  String",
            "title": "Database section"
        },
        {
            "location": "/install_windows/#settings-section",
            "text": "Property  Explanation  Type      prefix  The command prefix the bot will use.  String    autodeletemsg  Automatically delete music-related messages after a while.  Boolean    deleteTimeout  The amount of time after which to delete the messages.  Number    deleteTimeoutLong  Same as above, but for messages that have a longer timeout.  Number    maxvcslots  How many concurrent voice connections the bot can have until it won't join more.  Number",
            "title": "Settings section"
        },
        {
            "location": "/install_windows/#bezerk-section",
            "text": "Warning  Do not modify any of these settings! They're for internal use only.      Property  Explanation  Type      use  Whether Bezerk shall be used or not.  Boolean    uri  Specifies the websocket address for the Bezerk server.  String",
            "title": "Bezerk section"
        },
        {
            "location": "/install_windows/#elasticsearch-section",
            "text": "Warning  Do not modify any of these settings! They're for internal use only.      Property  Explanation  Type      use  Whether Elastic shall be used or not.  Boolean    client/host  Specifies the address for the Elastic server.  String",
            "title": "Elasticsearch section"
        },
        {
            "location": "/install_windows/#permissions-section",
            "text": "Property  Explanation  Type      master  The highest possible access level of Infinity. Full permissions.  Array < String >    level1, level2, level3  Settable access levels that give users access to certain commands.  Array < String >      Note  By default, when WildBeast joins a server it will set the owner's access level to 4. This is to give them control over normal users.",
            "title": "Permissions section"
        },
        {
            "location": "/install_windows/#api-keys-section",
            "text": "Property  Explanation  Type      imgflip  Your  imgflip  login details.  String    google  For retrieving data from YouTube.  String    twitchId  For retrieving status of whether a user on Twitch is streaming or not.  String    imgur  For retrieving random memes from Imgur.  String    cleverbot_user  Username to the cleverbot.io API, used in the cleverbot command.  String    cleverbot_key  Key to the cleverbot.io API, used in the cleverbot command.  String",
            "title": "API keys section"
        },
        {
            "location": "/install_windows/#making-the-config",
            "text": "OAuth app  We'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.  Go to  the Discord Developer dashboard  and create a new application.  Name it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".  Now you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.  Here you'll get a Client ID and a token. Reveal the token ( Not the secret ) and replace \"Bot token\" with that in the config.    Next we'll make an OAuth URL for the bot so it can be added to the server.  Just put this placeholder URL somewhere for now,  don't open it as it will not work . https://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655  Go back to the app page, and copy the Client ID.  Replace the  CLIENTID  placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.  If the URL works as intended, copy it and replace \"Bot OAuth URL (...)\" in the config with the one you copied.  You can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the  permissions  property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.  If you can't select your server, it might be that you lack Manage Server permissions.      Prefix and other settings  Setting the command prefix isn't really rocket science. This can be any special character, for instance  % ,  &  and so forth.  You can also use multiple characters as a prefix, for instance  !!  and  // . Avoid common single-character prefixes like  !  and  /  to avoid initial prefix conflicts. These can however be resolved with  customize  and changing the prefix for the server.  Note that there is always a so-called global prefix: A mention. Saying  @BotName  in chat will function as a prefix as well.  This needn't be specified in the config as it's always active.    The rest of the options are straightforward.  autodeletemsg  can be true or false, the message deletion times can be whatever you fancy in milliseconds and  maxvcslots  is just a number.  Permissions  This is a section that has a very interesting gimmick to it.  WildBeast has a command named  setlevel  which will set the level of a user.  However , that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.  The permissions fields here are so-called  global permissions , and will apply unless a server-specific level is set.  Use this to add technicians and others who need permissions regardless of where the bot is.    You can specify users here by adding their IDs into the fields. Only the master field is mandatory.  You can get the ID of a user by either \"backlash mentioning\" them, which means to say typing  \\@User  in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.  Remember to follow the example syntax in the master field when adding multiple users!      API keys  General notice: Anything within these fields is sensitive and could do much harm if revealed to the public.  Therefore it is imperative that you keep this to yourself.  WildBeast maintainers will  NEVER  ask for your login details or API keys. Only show the options to trusted WildBeast maintainers in WildBot's Territory.  imgflip  The procedure for getting this isn't tricky. Just go to  https://imgflip.com , create an account and input your username and password into the fields.    Google  This API is used to retrieve data from YouTube, related to music playback.  Go to  https://console.developers.google.com  and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.  Wait a while as the project is being created.  When the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".  This will take you to the API library. Select \"YouTube Data API\" as highlighted below.  When the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create credentials. That's exactly what we will do.  Click the \"Go to credentials\" button. In the next dropdowns, make them look like following.  Hit \"What credentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.      Twitch  This API is used with the  twitch  command. This will be the client ID the bot passes to Twitch when retrieving stream status.  Go to the  Twitch Connections page , scroll down to the bottom and click \"Register new application\".  Fill in the fields. Name should be your app name, and set the Redirect URI to  http://localhost  unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.  Click \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".  Copy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.      Imgur  This API is used in conjuction with the  randommeme  command to pull random memes from Imgur.  Go to the  Imgur App Registration .  Fill in the application name you prefer to use. Set Authorization type to \"Anonymous usage without user authentication\" as no further auth will be needed for pulling memes.  Fill in the email you fancy to receive notifications about this app in.  Description... Well, anything you find useful there.  You should end up with the below view.  Solve the CAPTCHA and hit \"Submit\" on the bottom of the page. This will take you to the page where you can see your client ID and secret.  Copy the Client ID and replace the \"A Imgur Client-ID\" placeholder with that value.      Cleverbot  This API is used in conjunction with the  cleverbot  command to do cleverbot discussions.  Go to  cleverbot.io  and login to get your API user and key.  After logging in, copy the contents of the \"API User\" and \"API Key\" fields and paste them into the appropriate fields in the config, API User to cleverbot_user and API Key to cleverbot_key.         That's all, your config should now be ready to rock! Save it as  config.json .   Warning  Don't save the file as  config.example.json  as the bot will error if you do. Don't hit Ctrl+S, hit Ctrl+Alt+S!",
            "title": "Making the config"
        },
        {
            "location": "/install_windows/#running-the-bot",
            "text": "Congratulations, your WildBeast instance should be ready to launch!  WildBeast has a system built in to create the required databases and tables for you without extra effort. To do this, run  npm run-script dbcreate  in the WildBeast directory.  When this has finished, it will tell you if the necessary database and tables have been created or already existed. To test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.  Run  node DougBot.js  in the bot's root directory to start it. If the bot runs without any errors, you have had success so far!  You can test simple functionality by running the  ping  command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations,  you have successfully set up WildBeast!  And that's it! You are now ready to start using your very own WildBeast instance!  Keep in mind, if you have further questions or need help, we're around over at our official server! Link below.  On the behalf of the WildBeast team,  we hope you enjoy your bot!",
            "title": "Running the bot"
        },
        {
            "location": "/install_linux/",
            "text": "Welcome to the installation guide for WildBeast on Linux! In this guide, we'll walk you through the installation and deployment process for WildBeast on Linux.\n\n\nPrerequisites\n\n\n\n\nA Linux server\n\n\nType: VPS is enough to run WB, dedicated is a bit overshooting unless you have something else running there as well\n\n\nOS: Ubuntu LTS or latest, optionally Debian 8\n\n\nRAM: May work on 256 MB, 512MB is recommended in case you plan on having it on just a few servers. Scale up if necessary\n\n\nProcessor: Single core @ 2.60 GHz or higher will work just fine, as above\n\n\nSSH access to the server\n\n\n\n\n\n\nPrograms\n\n\nSSH client, i.e. \nPuTTY\n or \nBitVise\n for executing commands on the server\n\n\nSFTP program, i.e. \nFileZilla\n or \nWinSCP\n for quick editing and upload of files\n\n\nA code editor, i.e. \nNotepad++\n or \nAtom\n or \nBrackets\n\n\n\n\n\n\n\n\n\n\nBefore you begin\n\n\nWe highly recommend that you go through a basic Linux server setup before starting this, which includes adding a new user, disabling root login (If you feel so) and adding SSH key authentication for logins. If you have no idea what we mean by this, see the \nDigital Ocean guides for initial server setup\n. When this is complete, you can proceed to the next step.\n\n\n\n\nInstallation\n\n\nDuring installation, some administrative tasks will be performed. For those tasks to work (Especially installations), you need to run them in sudo mode. We'll let you know when that's necessary, and even if we fail to do so, Linux will gladly let you know that \nsudo\n is required.\n\n\nAs in, it will yell at you for trying to do something administrative without sudo. Loud. Like really, really loud.\n\n\n\n\nDanger\n\n\nWhile you may think just running commands as \nroot\n is easier, it's not in any way advised to do so. Root can really \nBLEEP\n your \nBLEEP\n up if you do something wrong with it. To avoid those situations, please use \nsudo\n instead.\n\n\n\n\nInstalling Node\n\n\nFirst off, we'll install Node.js, the runtime WildBeast uses. Run these commands sequentially.\n\n\ncurl -sL https://deb.nodesource.com/setup_6.x \n|\n sudo -E bash -\nsudo apt-get install -y nodejs build-essential\n\n\n\n\n\nNow you can check your Node version from the console by running \nnode -v\n which should be \nv6.10.2\n at the time of writing.\n\n\n\n\n-bash: curl: command not found\n\n\nCurl may not come preinstalled on all Ubuntu and/or Debian OS's. If this is the case, just run \nsudo apt-get install curl\n and try again.\n\n\n\n\nRetrieving WildBeast\n\n\nNow we'll retrieve the WildBeast source code via Git.\n\n\nIf you don't have Git installed already, run \nsudo apt-get install git\n. Clone the Git repository with \ngit clone https://github.com/TheSharks/WildBeast.git \n&&\n \ncd\n WildBeast\n.\n\n\nIf you encounter big problems during installation, you can delete the directory with \nrm -d -f -r ~/WildBeast\n and reclone the repository.\n\n\nInstalling additional dependencies\n\n\nSome additional dependencies also need to be installed to run WildBeast properly.\n\n\nFirst on the list is FFMPEG. This is a crucial step if you want to use music playback. The install process varies a bit based on the Linux distribution, but we have the three supported options outlined below.\n\n\n\n \nCommands to install FFMPEG on Ubuntu 14.04\n (click here)\n\n\nsudo add-apt-repository ppa:mc3man/trusty-media \n&&\n sudo apt-get update \n&&\n sudo apt-get install ffmpeg -y\n\n\n\n\n\n\n\n\n \nCommands to install FFMPEG on Ubuntu 16.04\n (click here)\n\n\nsudo apt-get install -y ffmpeg\n\n\n\n\n\n\n\n\n  \nCommands to install FFMPEG on Debian 8\n (click here)\n\nEdit \n/etc/apt/sources.list\n from the terminal using vi or nano, this will require the use of \nsudo\n. Alternatively edit this file using SFTP with the methods described later in this guide.\nEnable the non-free repo by finding and changing the following or similar line: \n\n\ndeb http://mirror.us.leaseweb.net/debian/ jessie main\n\n\n\n\n\nto look like this now: \n\n\ndeb http://mirror.us.leaseweb.net/debian/ jessie main non-free\n\n\n\n\n\nEnable the backports repo by adding this line at the bottom of the file: \n\n\ndeb http://mirror.us.leaseweb.net/debian/ jessie-backports main contrib non-free\n\n\n\n\n\nNow run the following commands to update the repo information and install FFMPEG\n\n\nsudo apt-get update \n&&\n sudo apt-get install -y ffmpeg\n\n\n\n\n\n\n\nWithout changing working directory, we'll now install the Node modules required for usage in WildBeast. Run \nnpm install\n.\n\n\nThis will likely take a while as it has a lot to retrieve. If you get warns (Yellow text) you can ignore them as long as the output resembles to the following.\n\n\nWildBeast@4.3.0 /home/\n(\nyourhomedir\n)\n\n+-- cleverbot-node@0.2.2\n\n|\n +-- crypto@0.0.3\n\n|\n \n`\n-- http@0.0.0\n+-- discordie@0.8.1\n\n(\n...\n)\n\n\n\n\n\n\nInstalling RethinkDB and creating the DB\n\n\nAs of WildBeast version 4.0.0, RethinkDB is used to store server-specific data. This includes server owner, customize options and a whole bunch of other things.\n\n\n\n\nWarning\n\n\nDo not change RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can fix it yourself in case you mess up.\n\n\n\n\nRun the following commands one at a time.\n\n\n\n \nCommands to install RethinkDB on Ubuntu\n (click here)\n\n\nsource\n /etc/lsb-release \n&&\n \necho\n \n\"deb http://download.rethinkdb.com/apt \n$DISTRIB_CODENAME\n main\"\n \n|\n sudo tee /etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg \n|\n sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb\n\n\n\n\n\n\n\n\n \nCommands to install RethinkDB on Debian\n (click here)\n\n\necho\n \n\"deb http://download.rethinkdb.com/apt `lsb_release -cs` main\"\n \n|\n sudo tee /etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg \n|\n sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb\n\n\n\n\n\n\n\nWhen RethinkDB has installed, run \nrethinkdb --daemon\n. Keep in mind if you restart your server you will need to run this again to start the database service. If RethinkDB runs without errors, you should be good to go.\n\n\nConfiguration\n\n\nSetting up SFTP\n\n\nNext we'll make a config file for WildBeast. Unless you love your command line and editing stuff that way, this is the step where we'd advise you to bring out FileZilla. Using this program, you can transfer files from and to the server. This speeds up the editing process.\n\n\nStart up FileZilla and open the server manager by hitting Ctrl+S. Click \"New Site\" and name it whatever you prefer. Then fill in the server's IP address. By default, SFTP (SSH File Transfer Protocol) connections go to port 22. In the dropdown menu below, select SFTP. \nDon't use normal FTP!\n\n\nIn the field below that, you'll be setting the login method. Depending on the level of privacy or ease you want, you can select either \nNormal\n or \nAsk for password\n. Fill in your login details accordingly.\n\n\n\n\nTip\n\n\nUnless you know what you are doing, don't touch the rest of the tabs. They are fine as they are.\n\n\n\n\nYour site should be something like the example below.\n\n\n\n\nRetrieving the example config\n\n\nConnect to the server via FileZilla. You should now see the so-called remote site in FileZilla. Open the WildBeast directory. In there you can find a file named \nconfig.example.json\n.\n\n\nDouble click the file to download it for editing. On the left-hand side of the screen, you can see where the file was downloaded.\n\n\nFind \nconfig.example.json\n on your PC and open it using Notepad++ or any other code editor.\n\n\n\n\nWhat not to do\n\n\nDon't open the file with Windows Notepad. This will cause a bucketload of issues that just complicate the install process. Use a modern text editor!\n\n\n\n\nThe config file\n\n\nWhen opening the config file, you should have a file that looks like the \nexample config\n.\n\n\nWe'll now walk you through the different sections in the config and what they do.\n\n\nBot section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nOAuth token for the bot.\n\n\nString\n\n\n\n\n\n\noauth\n\n\nThe OAuth URL for the bot.\n\n\nString\n\n\n\n\n\n\n\n\nDatabase section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nPoints to WildBeast's database, localhost by default.\n\n\nString\n\n\n\n\n\n\nport\n\n\nSpecifies which network port the RethinkDB server is running on.\n\n\nNumber\n\n\n\n\n\n\npassword\n\n\nPassword to RethinkDB user.\n\n\nString\n\n\n\n\n\n\nuser\n\n\nRethinkDB user account to use for accessing the database.\n\n\nString\n\n\n\n\n\n\n\n\nSettings section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\nThe command prefix the bot will use.\n\n\nString\n\n\n\n\n\n\nautodeletemsg\n\n\nAutomatically delete music-related messages after a while.\n\n\nBoolean\n\n\n\n\n\n\ndeleteTimeout\n\n\nThe amount of time after which to delete the messages.\n\n\nNumber\n\n\n\n\n\n\ndeleteTimeoutLong\n\n\nSame as above, but for messages that have a longer timeout.\n\n\nNumber\n\n\n\n\n\n\nmaxvcslots\n\n\nHow many concurrent voice connections the bot can have until it won't join more.\n\n\nNumber\n\n\n\n\n\n\n\n\nBezerk section\n\n\n\n\nWarning\n\n\nDo not modify any of these settings! They're for internal use only.\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nuse\n\n\nWhether Bezerk shall be used or not.\n\n\nBoolean\n\n\n\n\n\n\nuri\n\n\nSpecifies the websocket address for the Bezerk server.\n\n\nString\n\n\n\n\n\n\n\n\nElasticsearch section\n\n\n\n\nWarning\n\n\nDo not modify any of these settings! They're for internal use only.\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nuse\n\n\nWhether Elastic shall be used or not.\n\n\nBoolean\n\n\n\n\n\n\nclient/host\n\n\nSpecifies the address for the Elastic server.\n\n\nString\n\n\n\n\n\n\n\n\nPermissions section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nThe highest possible access level of Infinity. Full permissions.\n\n\nArray\n<\nString\n>\n\n\n\n\n\n\nlevel1, level2, level3\n\n\nSettable access levels that give users access to certain commands.\n\n\nArray\n<\nString\n>\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nBy default, when WildBeast joins a server it will set the owner's access level to 4. This is to give them control over normal users.\n\n\n\n\nAPI keys section\n\n\n\n\n\n\n\n\nProperty\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nimgflip\n\n\nYour \nimgflip\n login details.\n\n\nString\n\n\n\n\n\n\ngoogle\n\n\nFor retrieving data from YouTube.\n\n\nString\n\n\n\n\n\n\ntwitchId\n\n\nFor retrieving status of whether a user on Twitch is streaming or not.\n\n\nString\n\n\n\n\n\n\nimgur\n\n\nFor retrieving random memes from Imgur.\n\n\nString\n\n\n\n\n\n\ncleverbot_user\n\n\nUsername to the cleverbot.io API, used in the cleverbot command.\n\n\nString\n\n\n\n\n\n\ncleverbot_key\n\n\nKey to the cleverbot.io API, used in the cleverbot command.\n\n\nString\n\n\n\n\n\n\n\n\nMaking the config\n\n\n\n\nOAuth app\n\n\nWe'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.\n\n\nGo to \nthe Discord Developer dashboard\n and create a new application.\n\n\nName it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".\n\n\nNow you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.\n\n\nHere you'll get a Client ID and a token. Reveal the token (\nNot the secret\n) and replace \"Bot token\" with that in the config.\n\n\n\n\n\n\nNext we'll make an OAuth URL for the bot so it can be added to the server.\n\n\nJust put this placeholder URL somewhere for now, \ndon't open it as it will not work\n.\n\nhttps://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655\n\n\nGo back to the app page, and copy the Client ID.\n\n\nReplace the \nCLIENTID\n placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.\n\n\nIf the URL works as intended, copy it and replace \"Bot OAuth URL (...)\" in the config with the one you copied.\n\n\nYou can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the \npermissions\n property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.\n\n\nIf you can't select your server, it might be that you lack Manage Server permissions.\n\n\n\n\n\n\n\n\n\n\nPrefix and other settings\n\n\nSetting the command prefix isn't really rocket science. This can be any special character, for instance \n%\n, \n&\n and so forth.\n\n\nYou can also use multiple characters as a prefix, for instance \n!!\n and \n//\n. Avoid common single-character prefixes like \n!\n and \n/\n to avoid initial prefix conflicts. These can however be resolved with \ncustomize\n and changing the prefix for the server.\n\n\nNote that there is always a so-called global prefix: A mention. Saying \n@BotName\n in chat will function as a prefix as well. \nThis needn't be specified in the config as it's always active.\n\n\n\n\n\n\nThe rest of the options are straightforward. \nautodeletemsg\n can be true or false, the message deletion times can be whatever you fancy in milliseconds and \nmaxvcslots\n is just a number.\n\n\nPermissions\n\n\nThis is a section that has a very interesting gimmick to it.\n\n\nWildBeast has a command named \nsetlevel\n which will set the level of a user. \nHowever\n, that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.\n\n\nThe permissions fields here are so-called \nglobal permissions\n, and will apply unless a server-specific level is set.\n\n\nUse this to add technicians and others who need permissions regardless of where the bot is.\n\n\n\n\n\n\nYou can specify users here by adding their IDs into the fields. Only the master field is mandatory.\n\n\nYou can get the ID of a user by either \"backlash mentioning\" them, which means to say typing \n\\@User\n in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.\n\n\nRemember to follow the example syntax in the master field when adding multiple users!\n\n\n\n\n\n\n\n\n\n\nAPI keys\n\n\nGeneral notice: Anything within these fields is sensitive and could do much harm if revealed to the public. \nTherefore it is imperative that you keep this to yourself.\n WildBeast maintainers will \nNEVER\n ask for your login details or API keys. Only show the options to trusted WildBeast maintainers in WildBot's Territory.\n\n\nimgflip\n\n\nThe procedure for getting this isn't tricky. Just go to \nhttps://imgflip.com\n, create an account and input your username and password into the fields.\n\n\n\n\n\n\nGoogle\n\n\nThis API is used to retrieve data from YouTube, related to music playback.\n\n\nGo to \nhttps://console.developers.google.com\n and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.\n\n\nWait a while as the project is being created.\n\n\nWhen the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".\n\n\nThis will take you to the API library. Select \"YouTube Data API\" as highlighted below.\n\n\n\nWhen the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create credentials. That's exactly what we will do.\n\n\nClick the \"Go to credentials\" button. In the next dropdowns, make them look like following.\n\n\n\nHit \"What credentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.\n\n\n\n\n\n\n\n\n\n\nTwitch\n\n\nThis API is used with the \ntwitch\n command. This will be the client ID the bot passes to Twitch when retrieving stream status.\n\n\nGo to the \nTwitch Connections page\n, scroll down to the bottom and click \"Register new application\".\n\n\nFill in the fields. Name should be your app name, and set the Redirect URI to \nhttp://localhost\n unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.\n\n\n\nClick \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".\n\n\n\nCopy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.\n\n\n\n\n\n\n\n\n\n\nImgur\n\n\nThis API is used in conjunction with the \nrandommeme\n command to pull random memes from Imgur.\n\n\nGo to the \nImgur App Registration\n.\n\n\nFill in the application name you prefer to use. Set Authorization type to \"Anonymous usage without user authentication\" as no further auth will be needed for pulling memes.\n\n\nFill in the email you fancy to receive notifications about this app in.\n\n\nDescription... Well, anything you find useful there.\n\n\nYou should end up with the below view.\n\n\n\nSolve the CAPTCHA and hit \"Submit\" on the bottom of the page. This will take you to the page where you can see your client ID and secret.\n\n\n\nCopy the Client ID and replace the \"A Imgur Client-ID\" placeholder with that value.\n\n\n\n\n\n\n\n\n\n\nCleverbot\n\n\nThis API is used in conjuction with the \ncleverbot\n command to do cleverbot discussions.\n\n\nGo to \ncleverbot.io\n and login to get your API user and key.\n\n\nAfter logging in, copy the contents of the \"API User\" and \"API Key\" fields and paste them into the appropriate fields in the config, API User to cleverbot_user and API Key to cleverbot_key.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat's all, your config should now be ready to rock! Save it as \nconfig.json\n and upload it to the server via FileZilla.\n\n\n\n\nWarning\n\n\nDon't save the file as \nconfig.example.json\n as the bot will error if you do. Don't hit Ctrl+S, hit Ctrl+Alt+S!\n\n\n\n\nRunning the bot\n\n\nCongratulations, your WildBeast instance should be ready to launch!\n\n\nWildBeast has a system built in to create the required databases and tables for you without extra effort. To do this, run \nnpm run-script dbcreate\n in the WildBeast directory.\n\n\nWhen this has finished, it will tell you if the necessary database and tables have been created or already existed. To test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.\n\n\nRun \nnode DougBot.js\n in the bot's root directory to start it. If the bot runs without any errors, you have had success so far!\n\n\nYou can test simple functionality by running the \nping\n command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations, \nyou have successfully set up WildBeast!\n\n\nRethinkDB Dashboard\n\n\n\n\nSummary\n\n\nThe following information is for those who need to access the RethinkDB web interface to create, delete or edit the database contents. This is for users that want maximum control and are familiar with database engines, so skip this if you don't meet those criteria.\n\n\n\n\nShould you need to access the RethinkDB dashboard remotely to create, delete or edit the information stored within, there are a few possible methods of approach. You may create a tunnel using SSH to forward traffic from your browser to the server or run RethinkDB using the \n--bind all\n option with firewall rules to only allow your IP address to connect. This guide will not provide instructions for the aforementioned due to their heavily distribution-dependent nature.\n\n\nCreating an SSH tunnel in PuTTY\n\n\n\n\nFill in the IP or FQDN in the \"Host name (or IP address)\" field. Alternatively, load an already saved profile by clicking on it once and then hit\nLoad\n.\n\n\nUnder the category box you will see \nConnection\n, go to \nSSH\n and click the \n+\n sign.\n\n\nBeneath this go to \nTunnels\n.\n\n\nSource port\n can be anything but this guide assumes it is 8080.\n\n\nDestination\n is \n127.0.0.1:8080\n, the radio buttons below are \nLocal\n and \nAuto\n. It should look like the following.\n\n\n\nNow you need to click on the \nAdd\n button and then \nOpen\n to start the SSH session. You will be prompted for your server's username and password.\n\n\n\n\n\n\n\n\nOpen your favorite browser and go to \nhttp://127.0.0.1:8080\n. You should have your RethinkDB dashboard visible.\n\n\n\n\nBackground running WildBeast\n\n\nWith the current system that we described above, the bot will run until the SSH session is closed or an error occurs that ends the process. How can we combat this? The answer is: PM2!\n\n\nPM2, short for Process Manager 2, is a Node app intended to run and manage multiple apps running on one account in a Linux environment, which enables more than one process running at a time.\n\n\n\n\nTip\n\n\nOur official WildBeast instance, WildBot, uses PM2!\n\n\n\n\nInstalling PM2 and starting the bot\n\n\nBefore doing this, hit Ctrl+C (Close command) to shut down WildBeast if it's still running. You can install PM2 with \nnpm install -g pm2\n.\n\n\nWhen PM2 is installed, navigate to the WildBeast install directory (\ncd\n ~/Wildbeast\n if you are in the server root). Then run \npm2 start DougBot.js\n. PM2 should start the process and return a small process table with \nDougBot\n listed. The bot should now be online in your Discord server as well.\n\n\nYou can find out more about PM2 by typing \npm2\n in the console.\n\n\nAnd that's it! You are now ready to start using your very own WildBeast instance!\n\n\nKeep in mind, if you have further questions or need help, we're around over at our official server! Link below.\n\n\nOn the behalf of the WildBeast team, \nwe hope you enjoy your bot!",
            "title": "Linux installation"
        },
        {
            "location": "/install_linux/#prerequisites",
            "text": "A Linux server  Type: VPS is enough to run WB, dedicated is a bit overshooting unless you have something else running there as well  OS: Ubuntu LTS or latest, optionally Debian 8  RAM: May work on 256 MB, 512MB is recommended in case you plan on having it on just a few servers. Scale up if necessary  Processor: Single core @ 2.60 GHz or higher will work just fine, as above  SSH access to the server    Programs  SSH client, i.e.  PuTTY  or  BitVise  for executing commands on the server  SFTP program, i.e.  FileZilla  or  WinSCP  for quick editing and upload of files  A code editor, i.e.  Notepad++  or  Atom  or  Brackets      Before you begin  We highly recommend that you go through a basic Linux server setup before starting this, which includes adding a new user, disabling root login (If you feel so) and adding SSH key authentication for logins. If you have no idea what we mean by this, see the  Digital Ocean guides for initial server setup . When this is complete, you can proceed to the next step.",
            "title": "Prerequisites"
        },
        {
            "location": "/install_linux/#installation",
            "text": "During installation, some administrative tasks will be performed. For those tasks to work (Especially installations), you need to run them in sudo mode. We'll let you know when that's necessary, and even if we fail to do so, Linux will gladly let you know that  sudo  is required.  As in, it will yell at you for trying to do something administrative without sudo. Loud. Like really, really loud.   Danger  While you may think just running commands as  root  is easier, it's not in any way advised to do so. Root can really  BLEEP  your  BLEEP  up if you do something wrong with it. To avoid those situations, please use  sudo  instead.",
            "title": "Installation"
        },
        {
            "location": "/install_linux/#installing-node",
            "text": "First off, we'll install Node.js, the runtime WildBeast uses. Run these commands sequentially.  curl -sL https://deb.nodesource.com/setup_6.x  |  sudo -E bash -\nsudo apt-get install -y nodejs build-essential  Now you can check your Node version from the console by running  node -v  which should be  v6.10.2  at the time of writing.   -bash: curl: command not found  Curl may not come preinstalled on all Ubuntu and/or Debian OS's. If this is the case, just run  sudo apt-get install curl  and try again.",
            "title": "Installing Node"
        },
        {
            "location": "/install_linux/#retrieving-wildbeast",
            "text": "Now we'll retrieve the WildBeast source code via Git.  If you don't have Git installed already, run  sudo apt-get install git . Clone the Git repository with  git clone https://github.com/TheSharks/WildBeast.git  &&   cd  WildBeast .  If you encounter big problems during installation, you can delete the directory with  rm -d -f -r ~/WildBeast  and reclone the repository.",
            "title": "Retrieving WildBeast"
        },
        {
            "location": "/install_linux/#installing-additional-dependencies",
            "text": "Some additional dependencies also need to be installed to run WildBeast properly.  First on the list is FFMPEG. This is a crucial step if you want to use music playback. The install process varies a bit based on the Linux distribution, but we have the three supported options outlined below.  \n  Commands to install FFMPEG on Ubuntu 14.04  (click here)  sudo add-apt-repository ppa:mc3man/trusty-media  &&  sudo apt-get update  &&  sudo apt-get install ffmpeg -y   \n  Commands to install FFMPEG on Ubuntu 16.04  (click here)  sudo apt-get install -y ffmpeg   \n   Commands to install FFMPEG on Debian 8  (click here) \nEdit  /etc/apt/sources.list  from the terminal using vi or nano, this will require the use of  sudo . Alternatively edit this file using SFTP with the methods described later in this guide.\nEnable the non-free repo by finding and changing the following or similar line:   deb http://mirror.us.leaseweb.net/debian/ jessie main  to look like this now:   deb http://mirror.us.leaseweb.net/debian/ jessie main non-free  Enable the backports repo by adding this line at the bottom of the file:   deb http://mirror.us.leaseweb.net/debian/ jessie-backports main contrib non-free  Now run the following commands to update the repo information and install FFMPEG  sudo apt-get update  &&  sudo apt-get install -y ffmpeg   Without changing working directory, we'll now install the Node modules required for usage in WildBeast. Run  npm install .  This will likely take a while as it has a lot to retrieve. If you get warns (Yellow text) you can ignore them as long as the output resembles to the following.  WildBeast@4.3.0 /home/ ( yourhomedir ) \n+-- cleverbot-node@0.2.2 |  +-- crypto@0.0.3 |   ` -- http@0.0.0\n+-- discordie@0.8.1 ( ... )",
            "title": "Installing additional dependencies"
        },
        {
            "location": "/install_linux/#installing-rethinkdb-and-creating-the-db",
            "text": "As of WildBeast version 4.0.0, RethinkDB is used to store server-specific data. This includes server owner, customize options and a whole bunch of other things.   Warning  Do not change RethinkDB options or execute commands outside of the ones we tell you to unless you understand RethinkDB and can fix it yourself in case you mess up.   Run the following commands one at a time.  \n  Commands to install RethinkDB on Ubuntu  (click here)  source  /etc/lsb-release  &&   echo   \"deb http://download.rethinkdb.com/apt  $DISTRIB_CODENAME  main\"   |  sudo tee /etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg  |  sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb   \n  Commands to install RethinkDB on Debian  (click here)  echo   \"deb http://download.rethinkdb.com/apt `lsb_release -cs` main\"   |  sudo tee /etc/apt/sources.list.d/rethinkdb.list\nwget -qO- https://download.rethinkdb.com/apt/pubkey.gpg  |  sudo apt-key add -\nsudo apt-get update\nsudo apt-get install rethinkdb   When RethinkDB has installed, run  rethinkdb --daemon . Keep in mind if you restart your server you will need to run this again to start the database service. If RethinkDB runs without errors, you should be good to go.",
            "title": "Installing RethinkDB and creating the DB"
        },
        {
            "location": "/install_linux/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/install_linux/#setting-up-sftp",
            "text": "Next we'll make a config file for WildBeast. Unless you love your command line and editing stuff that way, this is the step where we'd advise you to bring out FileZilla. Using this program, you can transfer files from and to the server. This speeds up the editing process.  Start up FileZilla and open the server manager by hitting Ctrl+S. Click \"New Site\" and name it whatever you prefer. Then fill in the server's IP address. By default, SFTP (SSH File Transfer Protocol) connections go to port 22. In the dropdown menu below, select SFTP.  Don't use normal FTP!  In the field below that, you'll be setting the login method. Depending on the level of privacy or ease you want, you can select either  Normal  or  Ask for password . Fill in your login details accordingly.   Tip  Unless you know what you are doing, don't touch the rest of the tabs. They are fine as they are.   Your site should be something like the example below.",
            "title": "Setting up SFTP"
        },
        {
            "location": "/install_linux/#retrieving-the-example-config",
            "text": "Connect to the server via FileZilla. You should now see the so-called remote site in FileZilla. Open the WildBeast directory. In there you can find a file named  config.example.json .  Double click the file to download it for editing. On the left-hand side of the screen, you can see where the file was downloaded.  Find  config.example.json  on your PC and open it using Notepad++ or any other code editor.   What not to do  Don't open the file with Windows Notepad. This will cause a bucketload of issues that just complicate the install process. Use a modern text editor!",
            "title": "Retrieving the example config"
        },
        {
            "location": "/install_linux/#the-config-file",
            "text": "When opening the config file, you should have a file that looks like the  example config .  We'll now walk you through the different sections in the config and what they do.",
            "title": "The config file"
        },
        {
            "location": "/install_linux/#bot-section",
            "text": "Property  Explanation  Type      token  OAuth token for the bot.  String    oauth  The OAuth URL for the bot.  String",
            "title": "Bot section"
        },
        {
            "location": "/install_linux/#database-section",
            "text": "Property  Explanation  Type      host  Points to WildBeast's database, localhost by default.  String    port  Specifies which network port the RethinkDB server is running on.  Number    password  Password to RethinkDB user.  String    user  RethinkDB user account to use for accessing the database.  String",
            "title": "Database section"
        },
        {
            "location": "/install_linux/#settings-section",
            "text": "Property  Explanation  Type      prefix  The command prefix the bot will use.  String    autodeletemsg  Automatically delete music-related messages after a while.  Boolean    deleteTimeout  The amount of time after which to delete the messages.  Number    deleteTimeoutLong  Same as above, but for messages that have a longer timeout.  Number    maxvcslots  How many concurrent voice connections the bot can have until it won't join more.  Number",
            "title": "Settings section"
        },
        {
            "location": "/install_linux/#bezerk-section",
            "text": "Warning  Do not modify any of these settings! They're for internal use only.      Property  Explanation  Type      use  Whether Bezerk shall be used or not.  Boolean    uri  Specifies the websocket address for the Bezerk server.  String",
            "title": "Bezerk section"
        },
        {
            "location": "/install_linux/#elasticsearch-section",
            "text": "Warning  Do not modify any of these settings! They're for internal use only.      Property  Explanation  Type      use  Whether Elastic shall be used or not.  Boolean    client/host  Specifies the address for the Elastic server.  String",
            "title": "Elasticsearch section"
        },
        {
            "location": "/install_linux/#permissions-section",
            "text": "Property  Explanation  Type      master  The highest possible access level of Infinity. Full permissions.  Array < String >    level1, level2, level3  Settable access levels that give users access to certain commands.  Array < String >      Note  By default, when WildBeast joins a server it will set the owner's access level to 4. This is to give them control over normal users.",
            "title": "Permissions section"
        },
        {
            "location": "/install_linux/#api-keys-section",
            "text": "Property  Explanation  Type      imgflip  Your  imgflip  login details.  String    google  For retrieving data from YouTube.  String    twitchId  For retrieving status of whether a user on Twitch is streaming or not.  String    imgur  For retrieving random memes from Imgur.  String    cleverbot_user  Username to the cleverbot.io API, used in the cleverbot command.  String    cleverbot_key  Key to the cleverbot.io API, used in the cleverbot command.  String",
            "title": "API keys section"
        },
        {
            "location": "/install_linux/#making-the-config",
            "text": "OAuth app  We'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.  Go to  the Discord Developer dashboard  and create a new application.  Name it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".  Now you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.  Here you'll get a Client ID and a token. Reveal the token ( Not the secret ) and replace \"Bot token\" with that in the config.    Next we'll make an OAuth URL for the bot so it can be added to the server.  Just put this placeholder URL somewhere for now,  don't open it as it will not work . https://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655  Go back to the app page, and copy the Client ID.  Replace the  CLIENTID  placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.  If the URL works as intended, copy it and replace \"Bot OAuth URL (...)\" in the config with the one you copied.  You can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the  permissions  property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.  If you can't select your server, it might be that you lack Manage Server permissions.      Prefix and other settings  Setting the command prefix isn't really rocket science. This can be any special character, for instance  % ,  &  and so forth.  You can also use multiple characters as a prefix, for instance  !!  and  // . Avoid common single-character prefixes like  !  and  /  to avoid initial prefix conflicts. These can however be resolved with  customize  and changing the prefix for the server.  Note that there is always a so-called global prefix: A mention. Saying  @BotName  in chat will function as a prefix as well.  This needn't be specified in the config as it's always active.    The rest of the options are straightforward.  autodeletemsg  can be true or false, the message deletion times can be whatever you fancy in milliseconds and  maxvcslots  is just a number.  Permissions  This is a section that has a very interesting gimmick to it.  WildBeast has a command named  setlevel  which will set the level of a user.  However , that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.  The permissions fields here are so-called  global permissions , and will apply unless a server-specific level is set.  Use this to add technicians and others who need permissions regardless of where the bot is.    You can specify users here by adding their IDs into the fields. Only the master field is mandatory.  You can get the ID of a user by either \"backlash mentioning\" them, which means to say typing  \\@User  in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and pasting it in between the quotes.  Remember to follow the example syntax in the master field when adding multiple users!      API keys  General notice: Anything within these fields is sensitive and could do much harm if revealed to the public.  Therefore it is imperative that you keep this to yourself.  WildBeast maintainers will  NEVER  ask for your login details or API keys. Only show the options to trusted WildBeast maintainers in WildBot's Territory.  imgflip  The procedure for getting this isn't tricky. Just go to  https://imgflip.com , create an account and input your username and password into the fields.    Google  This API is used to retrieve data from YouTube, related to music playback.  Go to  https://console.developers.google.com  and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.  Wait a while as the project is being created.  When the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".  This will take you to the API library. Select \"YouTube Data API\" as highlighted below.  When the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create credentials. That's exactly what we will do.  Click the \"Go to credentials\" button. In the next dropdowns, make them look like following.  Hit \"What credentials do I need?\" and the page will generate a Google API key for you. Copy the API key and replace the \"A google key\" placeholder with that key in the config.      Twitch  This API is used with the  twitch  command. This will be the client ID the bot passes to Twitch when retrieving stream status.  Go to the  Twitch Connections page , scroll down to the bottom and click \"Register new application\".  Fill in the fields. Name should be your app name, and set the Redirect URI to  http://localhost  unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.  Click \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".  Copy that character sequence and replace the \"A twitch Client-ID\" placeholder in the config with that ID.      Imgur  This API is used in conjunction with the  randommeme  command to pull random memes from Imgur.  Go to the  Imgur App Registration .  Fill in the application name you prefer to use. Set Authorization type to \"Anonymous usage without user authentication\" as no further auth will be needed for pulling memes.  Fill in the email you fancy to receive notifications about this app in.  Description... Well, anything you find useful there.  You should end up with the below view.  Solve the CAPTCHA and hit \"Submit\" on the bottom of the page. This will take you to the page where you can see your client ID and secret.  Copy the Client ID and replace the \"A Imgur Client-ID\" placeholder with that value.      Cleverbot  This API is used in conjuction with the  cleverbot  command to do cleverbot discussions.  Go to  cleverbot.io  and login to get your API user and key.  After logging in, copy the contents of the \"API User\" and \"API Key\" fields and paste them into the appropriate fields in the config, API User to cleverbot_user and API Key to cleverbot_key.         That's all, your config should now be ready to rock! Save it as  config.json  and upload it to the server via FileZilla.   Warning  Don't save the file as  config.example.json  as the bot will error if you do. Don't hit Ctrl+S, hit Ctrl+Alt+S!",
            "title": "Making the config"
        },
        {
            "location": "/install_linux/#running-the-bot",
            "text": "Congratulations, your WildBeast instance should be ready to launch!  WildBeast has a system built in to create the required databases and tables for you without extra effort. To do this, run  npm run-script dbcreate  in the WildBeast directory.  When this has finished, it will tell you if the necessary database and tables have been created or already existed. To test if you've done everything correctly, you can do a \"test run\" with the bot. This means not making it permanently available, just testing if any errors are spat out when running.  Run  node DougBot.js  in the bot's root directory to start it. If the bot runs without any errors, you have had success so far!  You can test simple functionality by running the  ping  command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations,  you have successfully set up WildBeast!",
            "title": "Running the bot"
        },
        {
            "location": "/install_linux/#rethinkdb-dashboard",
            "text": "Summary  The following information is for those who need to access the RethinkDB web interface to create, delete or edit the database contents. This is for users that want maximum control and are familiar with database engines, so skip this if you don't meet those criteria.   Should you need to access the RethinkDB dashboard remotely to create, delete or edit the information stored within, there are a few possible methods of approach. You may create a tunnel using SSH to forward traffic from your browser to the server or run RethinkDB using the  --bind all  option with firewall rules to only allow your IP address to connect. This guide will not provide instructions for the aforementioned due to their heavily distribution-dependent nature.",
            "title": "RethinkDB Dashboard"
        },
        {
            "location": "/install_linux/#creating-an-ssh-tunnel-in-putty",
            "text": "Fill in the IP or FQDN in the \"Host name (or IP address)\" field. Alternatively, load an already saved profile by clicking on it once and then hit Load .  Under the category box you will see  Connection , go to  SSH  and click the  +  sign.  Beneath this go to  Tunnels .  Source port  can be anything but this guide assumes it is 8080.  Destination  is  127.0.0.1:8080 , the radio buttons below are  Local  and  Auto . It should look like the following.  Now you need to click on the  Add  button and then  Open  to start the SSH session. You will be prompted for your server's username and password.     Open your favorite browser and go to  http://127.0.0.1:8080 . You should have your RethinkDB dashboard visible.",
            "title": "Creating an SSH tunnel in PuTTY"
        },
        {
            "location": "/install_linux/#background-running-wildbeast",
            "text": "With the current system that we described above, the bot will run until the SSH session is closed or an error occurs that ends the process. How can we combat this? The answer is: PM2!  PM2, short for Process Manager 2, is a Node app intended to run and manage multiple apps running on one account in a Linux environment, which enables more than one process running at a time.   Tip  Our official WildBeast instance, WildBot, uses PM2!",
            "title": "Background running WildBeast"
        },
        {
            "location": "/install_linux/#installing-pm2-and-starting-the-bot",
            "text": "Before doing this, hit Ctrl+C (Close command) to shut down WildBeast if it's still running. You can install PM2 with  npm install -g pm2 .  When PM2 is installed, navigate to the WildBeast install directory ( cd  ~/Wildbeast  if you are in the server root). Then run  pm2 start DougBot.js . PM2 should start the process and return a small process table with  DougBot  listed. The bot should now be online in your Discord server as well.  You can find out more about PM2 by typing  pm2  in the console.  And that's it! You are now ready to start using your very own WildBeast instance!  Keep in mind, if you have further questions or need help, we're around over at our official server! Link below.  On the behalf of the WildBeast team,  we hope you enjoy your bot!",
            "title": "Installing PM2 and starting the bot"
        },
        {
            "location": "/install_docker/",
            "text": "Welcome to the installation guide for WildBeast on Docker! In this guide, we'll walk you through the installation and deployment process for WildBeast on Docker.\n\n\nThis guide allows for WildBeast to be installed on a Windows or Mac system. We will be instructing this on Windows, but if you're Mac savvy you should be able to do it yourself.\n\n\n\n\nWho should use WB on Docker?\n\n\nInstalling WildBeast on Docker is a suitable idea for someone that doesn't want to mess with the technical stuff a whole lot and just get it installed the easiest way possible. If this is your way, feel free to use this. If you want better control and modifiability, use the regular Windows installation guide!\n\n\n\n\nPrerequisites\n\n\n\n\nNote\n\n\nDocker has very specific system requirements, be sure to check them out below before proceeding.\n\n\n\n\n\n\nWindows\n\n\nOS: 64 bit Windows 10 Pro, Enterprise or Education\n\n\nNOTE:\n If you don't have one of these versions, you need to use Toolbox which we will not instruct the usage of\n\n\n\n\n\n\nSpecs wise you should be able to run this on anything else than a low-end laptop\n\n\nAdministrator access to the computer\n\n\n\n\n\n\nMac\n\n\nOS: OS X El Capitan 10.11 or newer macOS release\n\n\nModel: 2010 or newer\n\n\nThe system must have Intel\u2019s hardware support for MMU virtualization\n\n\nAdministrator access to the computer\n\n\n\n\n\n\nPrograms\n\n\nWe will be installing programs that are directly related to the bot later on. They will not be listed here.\n\n\nThese programs are required pre-setup:\n\n\nA code editor, i.e. \nNotepad++\n or \nAtom\n or \nBrackets\n\n\n\n\n\n\n\n\n\n\n\n\nDownloading Docker Toolbox & Hyper-V\n\n\nGo to \nthe Docker download site\n. Download the Windows version from the button you find by scrolling down. The installation is a one-click procedure, complete it.\n\n\nAllow Docker to launch from the installer or launch it from the start menu. You will be greeted by this screen if Microsoft Hyper-V isn't enabled. \nBefore you press OK however, read up on the next section and prepare to do it!\n Enabling Hyper-V will result in the computer being restarted which enables you to do the next steps at the same time.\n\n\n\n\nEnabling BIOS features\n\n\n\n\nNote\n\n\nThe following steps are heavily variable due to differences in BIOS systems. We will not provide specific assistance on doing this via our support, you need to Google and find out specifics yourself.\n\n\n\n\nRestart the computer and wait for the boot logo to come up. When it does, press the key specified in the lower-left corner of the screen to enter BIOS setup. You might have to Google around to find what key to press on your system to enter BIOS setup.\n\n\nWhen you manage to open BIOS setup, look around for something like Device Options. Then make sure that tickboxes that resemble to \"Data Execution Protection\" and \"Virtualization Technology\" are ticked. Then save your changes and exit BIOS setup.\n\n\nOn the test system at TheSharks which we use for testing and as a base for these guides (HP Elitebook 840 G2), we went through the following procedure.\n\n\nWe hit F2 to enter BIOS setup, then looked up Device Options under the Advanced tab in the BIOS and ticked the two boxes specified above.\n\n\n\n\n\n\nThen we hit Exit and saved the changes in the following dialog.\n\n\nWhen the computer boots up next time, Docker will autostart when the system starts. You will get a system notification when it's ready to use. In the meantime, you can go to the \nWindows guide\n and follow the guide on installing Git there if it's not installed on your system already.\n\n\nRetrieving WildBeast\n\n\nWhen Docker announces it's ready to use, open Windows PowerShell. You can now retrieve the WildBeast repository. Type the following commands into the terminal:\n\n\ngit clone https://github.com/TheSharks/WildBeast.git\n\ncd\n WildBeast\ndocker-compose up\n\n\n\n\n\n\n\nTip\n\n\nThe Docker composition in particular will take a good while so go make yourself a coffee or something while waiting for it to complete.\n\n\nTrust me, I went to the sauna while it was crunching and it was still going when I came back.\n\n\n\n\nWhen it completes, the system might start attempting to connect to the Discord gateway. Hit Ctrl+C when this happens to stop it, because that is for later. You still need to configure the bot.\n\n\nConfiguration\n\n\nInstalling Kitematic\n\n\nCheck for the Docker icon in the taskbar, right click it and select \"Open Kitematic\". This will present you with an option to download Kitematic.\n\n\n\n\nClick Download. You will have a ZIP package downloaded. Extract the contents to the folder specified in the download window, per default \nC:\\Program Files\\Docker\\Kitematic\n.\n\n\nRight click on Docker again and select \"Open Kinematic\". You may get an error now. If that happens, just click \"Use VirtualBox\" in the error message. This will take you to the login screen for Docker Hub. If you don't already have an account, create one now.\n\n\nAfter having logged in, you will see two containers on the left side of the screen: \nwildbeast\n and \nwildbeast-rethink\n.\n\n\n\n\nConfiguring WildBeast in Kitematic\n\n\nWe'll now go over configuration in Kitematic. Click on \nwildbeast\n in the sidebar and browse over to the Settings tab in the right corner.\n\n\nSettings on Docker are a bit different as their prefix tells what they relate to. They can be in a messy order, but configure them in the order explained later.\n\n\nBOT options\n\n\n\n\nWarning\n\n\nUser account support with this bot is deprecated and will be removed soon.\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\nOAuth token for the bot.\n\n\nString\n\n\n\n\n\n\noauth\n\n\nThe OAuth URL for the bot.\n\n\nString\n\n\n\n\n\n\n\n\nDATABASE options\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nPoints to WildBeast's database, localhost by default.\n\n\nString\n\n\n\n\n\n\nport\n\n\nSpecifies which network port the RethinkDB server is running on.\n\n\nNumber\n\n\n\n\n\n\npassword\n\n\nPassword to RethinkDB user.\n\n\nString\n\n\n\n\n\n\nuser\n\n\nRethinkDB user account to use for accessing the database.\n\n\nString\n\n\n\n\n\n\n\n\nSETTINGS options\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\nThe command prefix the bot will use.\n\n\nString\n\n\n\n\n\n\nautodeletemsg\n\n\nAutomatically delete music-related messages after a while.\n\n\nBoolean\n\n\n\n\n\n\ndeleteTimeout\n\n\nThe amount of time after which to delete the messages.\n\n\nNumber\n\n\n\n\n\n\ndeleteTimeoutLong\n\n\nSame as above, but for messages that have a longer timeout.\n\n\nNumber\n\n\n\n\n\n\nmaxvcslots\n\n\nHow many concurrent voice connections the bot can have until it won't join more.\n\n\nNumber\n\n\n\n\n\n\n\n\nPERMISSIONS options\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\nThe highest possible access level of Infinity. Full permissions.\n\n\nArray\n<\nString\n>\n\n\n\n\n\n\nlevel1, level2, level3\n\n\nSettable access levels that give users access to certain commands.\n\n\nArray\n<\nString\n>\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nBy default, when WildBeast joins a server it will set the owner's access level to 4. This is to give them control over normal users.\n\n\n\n\nAPI_KEYS options\n\n\n\n\n\n\n\n\nOption\n\n\nExplanation\n\n\nType\n\n\n\n\n\n\n\n\n\n\nimgflip\n\n\nYour \nimgflip\n login details.\n\n\nString\n\n\n\n\n\n\ngoogle\n\n\nFor retrieving data from YouTube.\n\n\nString\n\n\n\n\n\n\ntwitchId\n\n\nFor retrieving status of whether a user on Twitch is streaming or not.\n\n\nString\n\n\n\n\n\n\nimgur\n\n\nFor retrieving random memes from Imgur.\n\n\nString\n\n\n\n\n\n\ncleverbot_user\n\n\nUsername to the cleverbot.io API, used in the cleverbot command.\n\n\nString\n\n\n\n\n\n\ncleverbot_key\n\n\nKey to the cleverbot.io API, used in the cleverbot command.\n\n\nString\n\n\n\n\n\n\n\n\nEditing the settings\n\n\nWhen performing the tasks instructed here, remember that when it is completed you need to apply what you've done (Usually paste) in the settings. This means that the progress needs to be put into the \nValue\n field.\n\n\n\n\nWarning\n\n\nDo not modify the names of the environment variables in the Key section or add anything there!\n\n\n\n\n\n\nNote\n\n\nThere are some environment variables in the settings which aren't explained here. If you stumble upon them, \nDO NOT modify them\n unless told to by TheSharks staff! This can cause unexpected behavior to the bot and you'll have to fix it yourself.\n\n\n\n\nWith the danger zone clarified, let's proceed to configuration.\n\n\n\n\nOAuth app\n\n\nWe'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.\n\n\nGo to \nthe Discord Developer dashboard\n and create a new application.\n\n\nName it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".\n\n\nNow you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.\n\n\nHere you'll get a Client ID and a token. Reveal the token (\nNot the secret\n) and apply it to the \nBOT_TOKEN\n option.\n\n\n\n\n\n\nNext we'll make an OAuth URL for the bot so it can be added to the server.\n\n\nJust put this placeholder URL somewhere for now, \ndon't open it as it will not work\n.\n\nhttps://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655\n\n\nGo back to the app page, and copy the Client ID.\n\n\nReplace the \nCLIENTID\n placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.\n\n\nIf the URL works as intended, apply it to the \nBOT_OAUTH\n option.\n\n\nYou can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the \npermissions\n property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.\n\n\nIf you can't select your server, it might be that you lack Manage Server permissions.\n\n\n\n\n\n\n\n\n\n\nPrefix and other settings\n\n\nSetting the command prefix isn't really rocket science. This can be any special character, for instance \n%\n, \n&\n and so forth.\n\n\nYou can also use multiple characters as a prefix, for instance \n!!\n and \n//\n. Avoid common single-character prefixes like \n!\n and \n/\n to avoid initial prefix conflicts. These can however be resolved with \ncustomize\n and changing the prefix for the server.\n\n\nNote that there is always a so-called global prefix: A mention. Saying \n@BotName\n in chat will function as a prefix as well. \nThis needn't be specified in the options as it's always active.\n\n\nThe rest of the \nSETTINGS\n options are straight forward. \nSETTINGS_AUTODELETEMSG\n can be true or false, the message deletion times (\nSETTINGS_DELETE_TIMEOUT\n and \nSETTINGS_DELETE_TIMEOUT_LONG\n) can be whatever you want in milliseconds and \nSETTINGS_MAXVCSLOTS\n is just a number.\n\n\n\n\n\n\nPermissions\n\n\nThis is a section that has a very interesting gimmick to it.\n\n\nWildBeast has a command named \nsetlevel\n which will set the level of a user. \nHowever\n, that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.\n\n\nThe permissions fields here are so-called \nglobal permissions\n, and will apply unless a server-specific level is set.\n\n\nUse this to add technicians and others who need permissions regardless of where the bot is.\n\n\n\n\n\n\nYou can specify user permissions by adding their IDs into the \nPERMISSIONS_MASTER\n, \nPERMISSIONS_LEVEL1\n, \nPERMISSIONS_LEVEL2\n and \nPERMISSIONS_LEVEL3\n options. Only the master option is mandatory.\n\n\nYou can get the ID of a user by either \"backlash mentioning\" them, which means to say typing \n\\@User\n in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and applying it to the option.\n\n\nRemember that when adding multiple user IDs, you need to separate them with commas. So do it like \nid1,id2,id3\n \nwithout spaces\n!\n\n\n\n\n\n\n\n\n\n\nAPI keys\n\n\nGeneral notice: Anything within these fields is sensitive and could do much harm if revealed to the public. \nTherefore it is imperative that you keep this to yourself.\n WildBeast maintainers will \nNEVER\n ask for your login details or API keys. Only show the options to trusted WildBeast maintainers in WildBot's Territory.\n\n\nimgflip\n\n\nThe procedure for getting this isn't tricky. Just go to \nhttps://imgflip.com\n, create an account and input your username and password into the \nAPI_KEYS_IMGFLIP_USERNAME\n and \nAPI_KEYS_IMGFLIP_PASSWORD\n options.\n\n\n\n\n\n\nGoogle\n\n\nThis API is used to retrieve data from YouTube, related to music playback.\n\n\nGo to \nhttps://console.developers.google.com\n and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.\n\n\nWait a while as the project is being created.\n\n\nWhen the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".\n\n\nThis will take you to the API library. Select \"YouTube Data API\" as highlighted below.\n\n\n\nWhen the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create credentials. That's exactly what we will do.\n\n\nClick the \"Go to credentials\" button. In the next dropdowns, make them look like following.\n\n\n\nHit \"What credentials do I need?\" and the page will generate a Google API key for you. Copy the API key and apply it to the \nAPI_KEYS_GOOGLE\n option.\n\n\n\n\n\n\n\n\n\n\nTwitch\n\n\nThis API is used with the \ntwitch\n command. This will be the client ID the bot passes to Twitch when retrieving stream status.\n\n\nGo to the \nTwitch Connections page\n, scroll down to the bottom and click \"Register new application\".\n\n\nFill in the fields. Name should be your app name, and set the Redirect URI to \nhttp://localhost\n unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.\n\n\n\nClick \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".\n\n\n\nCopy that character sequence and apply it to the \nAPI_KEYS_TWITCH_ID\n option.\n\n\n\n\n\n\n\n\n\n\nImgur\n\n\nThis API is used in conjunction with the \nrandommeme\n command to pull random memes from Imgur.\n\n\nGo to the \nImgur App Registration\n.\n\n\nFill in the application name you prefer to use. Set Authorization type to \"Anonymous usage without user authentication\" as no further auth will be needed for pulling memes.\n\n\nFill in the email you fancy to receive notifications about this app in.\n\n\nDescription... Well, anything you find useful there.\n\n\nYou should end up with the below view.\n\n\n\nSolve the CAPTCHA and hit \"Submit\" on the bottom of the page. This will take you to the page where you can see your client ID and secret.\n\n\n\nCopy the Client ID and apply it to the \nAPI_KEYS_IMGUR\n option.\n\n\n\n\n\n\n\n\n\n\nCleverbot\n\n\nThis API is used in conjuction with the \ncleverbot\n command to do cleverbot discussions.\n\n\nGo to \ncleverbot.io\n and login to get your API user and key.\n\n\nAfter logging in, copy the contents of the \"API User\" and \"API Key\" fields and apply them to the options, API User to \nAPI_KEYS_CLEVERBOT_USER\n and API Key to \nAPI_KEYS_CLEVERBOT_KEY\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you're done configuring, hit Save below the environment variables.\n\n\n\n\nRunning the bot\n\n\nCongratulations, your WildBeast instance should be ready to launch! When installing, all required database tables and other prerequisistes to run the bot were installed so you are good to go out of the box.\n\n\nTo start the bot, browse back to Kitematic. Click on \nwildbeast-rethink\n and hit Start in the top left corner. It is crucial to start it first as the database engine needs to be running before any actions are performed.\n\n\nWhen \nwildbeast-rethink\n is running, browse to \nwildbeast\n and start it too. If the bot runs without any errors, you have had success so far!\n\n\nYou can test simple functionality by running the \nping\n command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations, \nyou have successfully set up WildBeast!\n\n\nWhen you want to stop the bot, you can browse back to Kitematic and stop \nwildbeast\n, subsequently stop \nwildbeast-rethink\n.\n\n\n\n\nDanger\n\n\nRemember to do it in this order to not cause corruptions or other issues with the database!\n\n\n\n\nAnd that's it! You are now ready to start using your very own WildBeast instance!\n\n\nKeep in mind, if you have further questions or need help, we're around over at our official server! Link below.\n\n\nOn the behalf of the WildBeast team, \nwe hope you enjoy your bot!",
            "title": "Docker installation"
        },
        {
            "location": "/install_docker/#prerequisites",
            "text": "Note  Docker has very specific system requirements, be sure to check them out below before proceeding.    Windows  OS: 64 bit Windows 10 Pro, Enterprise or Education  NOTE:  If you don't have one of these versions, you need to use Toolbox which we will not instruct the usage of    Specs wise you should be able to run this on anything else than a low-end laptop  Administrator access to the computer    Mac  OS: OS X El Capitan 10.11 or newer macOS release  Model: 2010 or newer  The system must have Intel\u2019s hardware support for MMU virtualization  Administrator access to the computer    Programs  We will be installing programs that are directly related to the bot later on. They will not be listed here.  These programs are required pre-setup:  A code editor, i.e.  Notepad++  or  Atom  or  Brackets",
            "title": "Prerequisites"
        },
        {
            "location": "/install_docker/#downloading-docker-toolbox-hyper-v",
            "text": "Go to  the Docker download site . Download the Windows version from the button you find by scrolling down. The installation is a one-click procedure, complete it.  Allow Docker to launch from the installer or launch it from the start menu. You will be greeted by this screen if Microsoft Hyper-V isn't enabled.  Before you press OK however, read up on the next section and prepare to do it!  Enabling Hyper-V will result in the computer being restarted which enables you to do the next steps at the same time.",
            "title": "Downloading Docker Toolbox &amp; Hyper-V"
        },
        {
            "location": "/install_docker/#enabling-bios-features",
            "text": "Note  The following steps are heavily variable due to differences in BIOS systems. We will not provide specific assistance on doing this via our support, you need to Google and find out specifics yourself.   Restart the computer and wait for the boot logo to come up. When it does, press the key specified in the lower-left corner of the screen to enter BIOS setup. You might have to Google around to find what key to press on your system to enter BIOS setup.  When you manage to open BIOS setup, look around for something like Device Options. Then make sure that tickboxes that resemble to \"Data Execution Protection\" and \"Virtualization Technology\" are ticked. Then save your changes and exit BIOS setup.  On the test system at TheSharks which we use for testing and as a base for these guides (HP Elitebook 840 G2), we went through the following procedure.  We hit F2 to enter BIOS setup, then looked up Device Options under the Advanced tab in the BIOS and ticked the two boxes specified above.    Then we hit Exit and saved the changes in the following dialog.  When the computer boots up next time, Docker will autostart when the system starts. You will get a system notification when it's ready to use. In the meantime, you can go to the  Windows guide  and follow the guide on installing Git there if it's not installed on your system already.",
            "title": "Enabling BIOS features"
        },
        {
            "location": "/install_docker/#retrieving-wildbeast",
            "text": "When Docker announces it's ready to use, open Windows PowerShell. You can now retrieve the WildBeast repository. Type the following commands into the terminal:  git clone https://github.com/TheSharks/WildBeast.git cd  WildBeast\ndocker-compose up   Tip  The Docker composition in particular will take a good while so go make yourself a coffee or something while waiting for it to complete.  Trust me, I went to the sauna while it was crunching and it was still going when I came back.   When it completes, the system might start attempting to connect to the Discord gateway. Hit Ctrl+C when this happens to stop it, because that is for later. You still need to configure the bot.",
            "title": "Retrieving WildBeast"
        },
        {
            "location": "/install_docker/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/install_docker/#installing-kitematic",
            "text": "Check for the Docker icon in the taskbar, right click it and select \"Open Kitematic\". This will present you with an option to download Kitematic.   Click Download. You will have a ZIP package downloaded. Extract the contents to the folder specified in the download window, per default  C:\\Program Files\\Docker\\Kitematic .  Right click on Docker again and select \"Open Kinematic\". You may get an error now. If that happens, just click \"Use VirtualBox\" in the error message. This will take you to the login screen for Docker Hub. If you don't already have an account, create one now.  After having logged in, you will see two containers on the left side of the screen:  wildbeast  and  wildbeast-rethink .",
            "title": "Installing Kitematic"
        },
        {
            "location": "/install_docker/#configuring-wildbeast-in-kitematic",
            "text": "We'll now go over configuration in Kitematic. Click on  wildbeast  in the sidebar and browse over to the Settings tab in the right corner.  Settings on Docker are a bit different as their prefix tells what they relate to. They can be in a messy order, but configure them in the order explained later.",
            "title": "Configuring WildBeast in Kitematic"
        },
        {
            "location": "/install_docker/#bot-options",
            "text": "Warning  User account support with this bot is deprecated and will be removed soon.      Option  Explanation  Type      token  OAuth token for the bot.  String    oauth  The OAuth URL for the bot.  String",
            "title": "BOT options"
        },
        {
            "location": "/install_docker/#database-options",
            "text": "Option  Explanation  Type      host  Points to WildBeast's database, localhost by default.  String    port  Specifies which network port the RethinkDB server is running on.  Number    password  Password to RethinkDB user.  String    user  RethinkDB user account to use for accessing the database.  String",
            "title": "DATABASE options"
        },
        {
            "location": "/install_docker/#settings-options",
            "text": "Option  Explanation  Type      prefix  The command prefix the bot will use.  String    autodeletemsg  Automatically delete music-related messages after a while.  Boolean    deleteTimeout  The amount of time after which to delete the messages.  Number    deleteTimeoutLong  Same as above, but for messages that have a longer timeout.  Number    maxvcslots  How many concurrent voice connections the bot can have until it won't join more.  Number",
            "title": "SETTINGS options"
        },
        {
            "location": "/install_docker/#permissions-options",
            "text": "Option  Explanation  Type      master  The highest possible access level of Infinity. Full permissions.  Array < String >    level1, level2, level3  Settable access levels that give users access to certain commands.  Array < String >      Note  By default, when WildBeast joins a server it will set the owner's access level to 4. This is to give them control over normal users.",
            "title": "PERMISSIONS options"
        },
        {
            "location": "/install_docker/#api_keys-options",
            "text": "Option  Explanation  Type      imgflip  Your  imgflip  login details.  String    google  For retrieving data from YouTube.  String    twitchId  For retrieving status of whether a user on Twitch is streaming or not.  String    imgur  For retrieving random memes from Imgur.  String    cleverbot_user  Username to the cleverbot.io API, used in the cleverbot command.  String    cleverbot_key  Key to the cleverbot.io API, used in the cleverbot command.  String",
            "title": "API_KEYS options"
        },
        {
            "location": "/install_docker/#editing-the-settings",
            "text": "When performing the tasks instructed here, remember that when it is completed you need to apply what you've done (Usually paste) in the settings. This means that the progress needs to be put into the  Value  field.   Warning  Do not modify the names of the environment variables in the Key section or add anything there!    Note  There are some environment variables in the settings which aren't explained here. If you stumble upon them,  DO NOT modify them  unless told to by TheSharks staff! This can cause unexpected behavior to the bot and you'll have to fix it yourself.   With the danger zone clarified, let's proceed to configuration.   OAuth app  We'll start off by creating an OAuth application in Discord's developer interface so that the bot can login.  Go to  the Discord Developer dashboard  and create a new application.  Name it whatever you prefer and give it a fancy picture. Fill in a description if you want to, then click \"Create application\".  Now you'll have a more full-fledged app page. Click \"Add Bot User\" and confirm to make it a bot.  Here you'll get a Client ID and a token. Reveal the token ( Not the secret ) and apply it to the  BOT_TOKEN  option.    Next we'll make an OAuth URL for the bot so it can be added to the server.  Just put this placeholder URL somewhere for now,  don't open it as it will not work . https://discordapp.com/oauth2/authorize?&client_id=CLIENTID&scope=bot&permissions=536345655  Go back to the app page, and copy the Client ID.  Replace the  CLIENTID  placeholder in the URL above with the ID you just copied. You can open the URL to test that you did it right.  If the URL works as intended, apply it to the  BOT_OAUTH  option.  You can also open the URL and add your bot to the server at this point, so you don't forget it. It will have the permissions it wants precalculated due to the number after the  permissions  property. Just select your server from the dropdown list and add it. The bot won't do anything at this stage because we're not finished yet.  If you can't select your server, it might be that you lack Manage Server permissions.      Prefix and other settings  Setting the command prefix isn't really rocket science. This can be any special character, for instance  % ,  &  and so forth.  You can also use multiple characters as a prefix, for instance  !!  and  // . Avoid common single-character prefixes like  !  and  /  to avoid initial prefix conflicts. These can however be resolved with  customize  and changing the prefix for the server.  Note that there is always a so-called global prefix: A mention. Saying  @BotName  in chat will function as a prefix as well.  This needn't be specified in the options as it's always active.  The rest of the  SETTINGS  options are straight forward.  SETTINGS_AUTODELETEMSG  can be true or false, the message deletion times ( SETTINGS_DELETE_TIMEOUT  and  SETTINGS_DELETE_TIMEOUT_LONG ) can be whatever you want in milliseconds and  SETTINGS_MAXVCSLOTS  is just a number.    Permissions  This is a section that has a very interesting gimmick to it.  WildBeast has a command named  setlevel  which will set the level of a user.  However , that is written into a server-specific config. Which means that if you set the level of someone to 2 in Server1, they will not be level 2 in Server2, for example.  The permissions fields here are so-called  global permissions , and will apply unless a server-specific level is set.  Use this to add technicians and others who need permissions regardless of where the bot is.    You can specify user permissions by adding their IDs into the  PERMISSIONS_MASTER ,  PERMISSIONS_LEVEL1 ,  PERMISSIONS_LEVEL2  and  PERMISSIONS_LEVEL3  options. Only the master option is mandatory.  You can get the ID of a user by either \"backlash mentioning\" them, which means to say typing  \\@User  in chat or by enabling Developer Mode (Personal Settings -> Appearance -> Enable Developer Mode) and right-clicking on someone, subsequently selecting Copy ID from the list and applying it to the option.  Remember that when adding multiple user IDs, you need to separate them with commas. So do it like  id1,id2,id3   without spaces !      API keys  General notice: Anything within these fields is sensitive and could do much harm if revealed to the public.  Therefore it is imperative that you keep this to yourself.  WildBeast maintainers will  NEVER  ask for your login details or API keys. Only show the options to trusted WildBeast maintainers in WildBot's Territory.  imgflip  The procedure for getting this isn't tricky. Just go to  https://imgflip.com , create an account and input your username and password into the  API_KEYS_IMGFLIP_USERNAME  and  API_KEYS_IMGFLIP_PASSWORD  options.    Google  This API is used to retrieve data from YouTube, related to music playback.  Go to  https://console.developers.google.com  and create a new project. Name it whatever you fancy. Nothing else needs to be changed unless you want to change the project ID or the app engine location.  Wait a while as the project is being created.  When the creation process is completed, you'll get taken to the Dashboard screen of the project. In the sidebar on the left, click \"Library\".  This will take you to the API library. Select \"YouTube Data API\" as highlighted below.  When the API page opens, click the \"Enable\" button in the top bar. Then you will get a notification saying that you need to create credentials. That's exactly what we will do.  Click the \"Go to credentials\" button. In the next dropdowns, make them look like following.  Hit \"What credentials do I need?\" and the page will generate a Google API key for you. Copy the API key and apply it to the  API_KEYS_GOOGLE  option.      Twitch  This API is used with the  twitch  command. This will be the client ID the bot passes to Twitch when retrieving stream status.  Go to the  Twitch Connections page , scroll down to the bottom and click \"Register new application\".  Fill in the fields. Name should be your app name, and set the Redirect URI to  http://localhost  unless you want something to function differently. Set the app type to \"Chat Bot\" as that's what you're basically doing here.  Click \"Register\". This will take you to the application management page. Down towards the bottom, there will be a section saying \"Client ID\".  Copy that character sequence and apply it to the  API_KEYS_TWITCH_ID  option.      Imgur  This API is used in conjunction with the  randommeme  command to pull random memes from Imgur.  Go to the  Imgur App Registration .  Fill in the application name you prefer to use. Set Authorization type to \"Anonymous usage without user authentication\" as no further auth will be needed for pulling memes.  Fill in the email you fancy to receive notifications about this app in.  Description... Well, anything you find useful there.  You should end up with the below view.  Solve the CAPTCHA and hit \"Submit\" on the bottom of the page. This will take you to the page where you can see your client ID and secret.  Copy the Client ID and apply it to the  API_KEYS_IMGUR  option.      Cleverbot  This API is used in conjuction with the  cleverbot  command to do cleverbot discussions.  Go to  cleverbot.io  and login to get your API user and key.  After logging in, copy the contents of the \"API User\" and \"API Key\" fields and apply them to the options, API User to  API_KEYS_CLEVERBOT_USER  and API Key to  API_KEYS_CLEVERBOT_KEY .         When you're done configuring, hit Save below the environment variables.",
            "title": "Editing the settings"
        },
        {
            "location": "/install_docker/#running-the-bot",
            "text": "Congratulations, your WildBeast instance should be ready to launch! When installing, all required database tables and other prerequisistes to run the bot were installed so you are good to go out of the box.  To start the bot, browse back to Kitematic. Click on  wildbeast-rethink  and hit Start in the top left corner. It is crucial to start it first as the database engine needs to be running before any actions are performed.  When  wildbeast-rethink  is running, browse to  wildbeast  and start it too. If the bot runs without any errors, you have had success so far!  You can test simple functionality by running the  ping  command (With your desired prefix) in a text channel that the bot can see. If it answers \"Pong!\", then congratulations,  you have successfully set up WildBeast!  When you want to stop the bot, you can browse back to Kitematic and stop  wildbeast , subsequently stop  wildbeast-rethink .   Danger  Remember to do it in this order to not cause corruptions or other issues with the database!   And that's it! You are now ready to start using your very own WildBeast instance!  Keep in mind, if you have further questions or need help, we're around over at our official server! Link below.  On the behalf of the WildBeast team,  we hope you enjoy your bot!",
            "title": "Running the bot"
        },
        {
            "location": "/updating/",
            "text": "This is a short instruction on how to keep your WildBeast instance up to date.\n\n\nUpdating the bot\n\n\nWhen an update is made to the WildBeast source code, this becomes known as a Git \ncommit\n. Smaller hotfixes and commits happen all the time which are then compiled into larger \nreleases\n. These releases mark larger milestones within the bot's history, for instance 2.0.0 and 3.0.0 which represent major releases.\n\n\nA couple notes:\n\n\n\n\nCommits can be made at any rate, the commit names and descriptions (At least on the ones not made by Doug) will tell whether it's worth implementing this into your instance right away.\n\n\nReleases (AKA minor releases) represent larger patches, and it is recommended to update the bot when these releases are made.\n\n\nMajor releases are breaking changes in the code. These are really major reworks that change the way the entire bot functions. Updating at these points is near to a must.\n\n\n\n\nSo, now that we have the update structure laid out, let's get to the gist of updating WildBeast. Updating this bot is fairly simple, regardless of system being used. \nHowever, this requires you to have downloaded the bot via Git in order to work!\n\n\nWhen updating the bot, run \ngit pull\n in a terminal with the working directory pointed to the WildBeast folder. This will retrieve the latest changes directly from GitHub.\n\n\n\n\nFailure\n\n\nIf you have made changes to the files, you might get an error saying that the local changes would be overwritten by the merge. In this case, you either have to manually insert changes into the code (By copying the changes from the commit, release or whatever) or discarding your local changes. If you go for the latter, you can do it with \ngit fetch --all && git reset --hard\n.\n\n\n\n\nUpdating the dependencies\n\n\nDependencies, or deps for short, are utilities that WildBeast relies on to work. These come in form of Node modules, external dependencies like FFMPEG and so forth.\n\n\nThe retrieving and installation of these packages has been largely automated due to the existence of \npackage.json\n. This file specifies what to retrieve and update when the need arises. You can update the bot's dependencies at will, but doing so at regular intervals is recommended.\n\n\nThe regular thing for using administrative commands applies here as well: Sudo is recommended for updating these modules, for good measure.\nTo update the dependencies, run \nnpm install\n with the working directory pointed to the WildBeast folder. This will install any updates to the NPM packages the bot uses.\n\n\nFinal note\n\n\nIf the bot breaks and won't function as it should, try updating the bot and the dependencies before coming to our Discord server with questions on fixing it. If it stays broken after this, feel free to come and ask questions then.\n\n\nWith these resources, your bot should be fine as long as it's up to date!",
            "title": "Updating"
        },
        {
            "location": "/updating/#updating-the-bot",
            "text": "When an update is made to the WildBeast source code, this becomes known as a Git  commit . Smaller hotfixes and commits happen all the time which are then compiled into larger  releases . These releases mark larger milestones within the bot's history, for instance 2.0.0 and 3.0.0 which represent major releases.  A couple notes:   Commits can be made at any rate, the commit names and descriptions (At least on the ones not made by Doug) will tell whether it's worth implementing this into your instance right away.  Releases (AKA minor releases) represent larger patches, and it is recommended to update the bot when these releases are made.  Major releases are breaking changes in the code. These are really major reworks that change the way the entire bot functions. Updating at these points is near to a must.   So, now that we have the update structure laid out, let's get to the gist of updating WildBeast. Updating this bot is fairly simple, regardless of system being used.  However, this requires you to have downloaded the bot via Git in order to work!  When updating the bot, run  git pull  in a terminal with the working directory pointed to the WildBeast folder. This will retrieve the latest changes directly from GitHub.   Failure  If you have made changes to the files, you might get an error saying that the local changes would be overwritten by the merge. In this case, you either have to manually insert changes into the code (By copying the changes from the commit, release or whatever) or discarding your local changes. If you go for the latter, you can do it with  git fetch --all && git reset --hard .",
            "title": "Updating the bot"
        },
        {
            "location": "/updating/#updating-the-dependencies",
            "text": "Dependencies, or deps for short, are utilities that WildBeast relies on to work. These come in form of Node modules, external dependencies like FFMPEG and so forth.  The retrieving and installation of these packages has been largely automated due to the existence of  package.json . This file specifies what to retrieve and update when the need arises. You can update the bot's dependencies at will, but doing so at regular intervals is recommended.  The regular thing for using administrative commands applies here as well: Sudo is recommended for updating these modules, for good measure.\nTo update the dependencies, run  npm install  with the working directory pointed to the WildBeast folder. This will install any updates to the NPM packages the bot uses.",
            "title": "Updating the dependencies"
        },
        {
            "location": "/updating/#final-note",
            "text": "If the bot breaks and won't function as it should, try updating the bot and the dependencies before coming to our Discord server with questions on fixing it. If it stays broken after this, feel free to come and ask questions then.  With these resources, your bot should be fine as long as it's up to date!",
            "title": "Final note"
        },
        {
            "location": "/sharding/",
            "text": "This is a quick document about Discord gateway sharding and how WildBeast uses this technology to it's advantage.\n\n\nNote:\n Shard mode with WildBeast is an advanced feature and only intended for bots with over 2500 guilds. If you aren't proficient with Discord's gateway sharding and websocket technologies, don't attempt to use this feature!\n\n\nTerminology\n\n\nQuick terminology table:\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nShard\n\n\nA partial WildBeast instance.\n\n\n\n\n\n\nGuild\n\n\nA Discord server.\n\n\n\n\n\n\ng/s\n\n\nShorthand for \"guilds per shard\".\n\n\n\n\n\n\n\n\nWhat is sharding?\n\n\nThe metaphorical viewpoint\n\n\nYou can think of sharding like this: You have a big glass ball that is sending power to a recipient. If a certain amount and more of power is being sent at one time, the recipient will be overwhelmed with data. But if you shatter the ball and let the pieces (Shards) send smaller amounts of power each, the load will be distributed better.\n\n\nThis example really is shitty, but it's best I could come up with...\n\n\nThe technical viewpoint\n\n\nIn practice, the Discord gateway allows you to split your guilds off into multiple shards. Using the logic above you can decrease gateway load and greatly increase bot performance. Discord also enforces gateway sharding on bots with more than 2500 guilds.\n\n\nExample: Your bot is on 10000 servers. Theoretically, the lowest possible shard count is 5 as that gives 2500 g/s. It is however in practice impossible since it leaves no lee-way for guild additions.\n\n\nA better idea is running 10 shards to have about 1000 g/s. 1000 g/s should be something to strive for but it's not a requirement. That leaves space for guild count growth and balances your load evenly.\n\n\nMaths with sharding\n\n\nShard count\n\n\nThe guild distribution is calculated like this:\n\n\nguildCount / desiredGps = shardCount\n\n\n\n\n\n\n\n\nElement\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nguildCount\n\n\nThe amount of guilds the bot is on.\n\n\n\n\n\n\ndesiredGps\n\n\nDesired guilds per shard ratio.\n\n\n\n\n\n\nshardCount\n\n\nThe amount of shards you will need.\n\n\n\n\n\n\n\n\nExample: \n10000 / 1000 = 10\n\n\nShard ID\n\n\nThis is a bit more complex calculation. If you are receiving events from a guild, you can \"trace\" the shard the events come from without additional logging.\n\n\nThe formula is the following:\n\n\n(guildId >> 22) % shardCount = shardNumber\n\n\n\n\n\n\n\n\nElement\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nguildId\n\n\nThe server ID you want to find the shard for.\n\n\n\n\n\n\nshardCount\n\n\nThe amount of shards you have in total.\n\n\n\n\n\n\nshardNumber\n\n\nThe shard which the guild is on. (Also referred to as shard ID)\n\n\n\n\n\n\n\n\nYou will not receive events from guilds that are not on your current shard (As in the instance you're viewing in logs, for example). They will not appear in \nguilds\n object in the READY packet either.\n\n\nSharding with WildBeast\n\n\nEnabling sharding\n\n\nTo start WildBeast in shard mode, you need to use the following format.\n\n\nnode DougBot.js --shardmode --shardcount\n=\n<shardCount> --shardid\n=\n<shardNumber>\n\n\n\n\n\n\n\nShard mode requirements\n\n\nshardCount\n must be > 2. You should have an even number of shards and the integer should naturally be unsigned. Having 1 shard is pointless as this is the default mode.\n\n\nshardNumber\n must not exceed or be equal to \nshardCount\n, and should start at 0.\n\n\nYou need to start exactly the same amount of processes as you are requesting the gateway to propagate (shardCount), and \nshardId\n must be unique for each process.\n\n\n\n\nStarting in shard mode\n\n\nTo start WildBeast in shard mode, run the startup command as described above. Example with the values we used above:\n\n\nnode DougBot.js --shardmode --shardcount\n=\n10\n --shardid\n=\n0\n\n\n\n\n\n\nRepeat this command until 10 shard processes are running. Using something like a PM2 process list in JSON format is recommended. Example (File is processes.json):\n\n\n{\n\n  \n\"apps\"\n:\n \n[\n\n    \n{\n\n      \n\"name\"\n:\n \n\"Shard 0\"\n,\n\n      \n\"script\"\n:\n \n\"./WildBeast/DougBot.js\"\n,\n\n      \n\"cwd\"\n:\n \n\"/home/youraccountname/WildBeast\"\n,\n\n      \n\"args\"\n:\n \n\"--shardmode --shardcount=10 --shardid=0\"\n,\n\n    \n},\n\n    \n{\n\n      \n\"name\"\n:\n \n\"Shard 1\"\n,\n\n      \n\"script\"\n:\n \n\"./WildBeast/DougBot.js\"\n,\n\n      \n\"cwd\"\n:\n \n\"/home/youraccountname/WildBeast\"\n,\n\n      \n\"args\"\n:\n \n\"--shardmode --shardcount=10 --shardid=1\"\n,\n\n    \n},\n\n    \n{\n\n      \n\"name\"\n:\n \n\"Shard 2\"\n,\n\n      \n\"script\"\n:\n \n\"./WildBeast/DougBot.js\"\n,\n\n      \n\"cwd\"\n:\n \n\"/home/youraccountname/WildBeast\"\n,\n\n      \n\"args\"\n:\n \n\"--shardmode --shardcount=10 --shardid=2\"\n,\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nYou could as an additional safeguard apply the \n\"force\": true\n flag in order to suppress PM2 warnings regarding a process being started multiple times.\n\n\nExtend the above until all shards are covered. Then just pass the file to PM2 in order to start it. This can be done with \npm2 start processes.json\n.\n\n\nAdditional reading about PM2 process files: \nhttp://pm2.keymetrics.io/docs/usage/application-declaration\n\n\nThat in a nutshell is how Discord gateway sharding works and how to use it with WildBeast.",
            "title": "Sharding"
        },
        {
            "location": "/sharding/#terminology",
            "text": "Quick terminology table:     Term  Definition      Shard  A partial WildBeast instance.    Guild  A Discord server.    g/s  Shorthand for \"guilds per shard\".",
            "title": "Terminology"
        },
        {
            "location": "/sharding/#what-is-sharding",
            "text": "",
            "title": "What is sharding?"
        },
        {
            "location": "/sharding/#the-metaphorical-viewpoint",
            "text": "You can think of sharding like this: You have a big glass ball that is sending power to a recipient. If a certain amount and more of power is being sent at one time, the recipient will be overwhelmed with data. But if you shatter the ball and let the pieces (Shards) send smaller amounts of power each, the load will be distributed better.  This example really is shitty, but it's best I could come up with...",
            "title": "The metaphorical viewpoint"
        },
        {
            "location": "/sharding/#the-technical-viewpoint",
            "text": "In practice, the Discord gateway allows you to split your guilds off into multiple shards. Using the logic above you can decrease gateway load and greatly increase bot performance. Discord also enforces gateway sharding on bots with more than 2500 guilds.  Example: Your bot is on 10000 servers. Theoretically, the lowest possible shard count is 5 as that gives 2500 g/s. It is however in practice impossible since it leaves no lee-way for guild additions.  A better idea is running 10 shards to have about 1000 g/s. 1000 g/s should be something to strive for but it's not a requirement. That leaves space for guild count growth and balances your load evenly.",
            "title": "The technical viewpoint"
        },
        {
            "location": "/sharding/#maths-with-sharding",
            "text": "",
            "title": "Maths with sharding"
        },
        {
            "location": "/sharding/#shard-count",
            "text": "The guild distribution is calculated like this:  guildCount / desiredGps = shardCount     Element  Explanation      guildCount  The amount of guilds the bot is on.    desiredGps  Desired guilds per shard ratio.    shardCount  The amount of shards you will need.     Example:  10000 / 1000 = 10",
            "title": "Shard count"
        },
        {
            "location": "/sharding/#shard-id",
            "text": "This is a bit more complex calculation. If you are receiving events from a guild, you can \"trace\" the shard the events come from without additional logging.  The formula is the following:  (guildId >> 22) % shardCount = shardNumber     Element  Explanation      guildId  The server ID you want to find the shard for.    shardCount  The amount of shards you have in total.    shardNumber  The shard which the guild is on. (Also referred to as shard ID)     You will not receive events from guilds that are not on your current shard (As in the instance you're viewing in logs, for example). They will not appear in  guilds  object in the READY packet either.",
            "title": "Shard ID"
        },
        {
            "location": "/sharding/#sharding-with-wildbeast",
            "text": "",
            "title": "Sharding with WildBeast"
        },
        {
            "location": "/sharding/#enabling-sharding",
            "text": "To start WildBeast in shard mode, you need to use the following format.  node DougBot.js --shardmode --shardcount = <shardCount> --shardid = <shardNumber>   Shard mode requirements  shardCount  must be > 2. You should have an even number of shards and the integer should naturally be unsigned. Having 1 shard is pointless as this is the default mode.  shardNumber  must not exceed or be equal to  shardCount , and should start at 0.  You need to start exactly the same amount of processes as you are requesting the gateway to propagate (shardCount), and  shardId  must be unique for each process.",
            "title": "Enabling sharding"
        },
        {
            "location": "/sharding/#starting-in-shard-mode",
            "text": "To start WildBeast in shard mode, run the startup command as described above. Example with the values we used above:  node DougBot.js --shardmode --shardcount = 10  --shardid = 0   Repeat this command until 10 shard processes are running. Using something like a PM2 process list in JSON format is recommended. Example (File is processes.json):  { \n   \"apps\" :   [ \n     { \n       \"name\" :   \"Shard 0\" , \n       \"script\" :   \"./WildBeast/DougBot.js\" , \n       \"cwd\" :   \"/home/youraccountname/WildBeast\" , \n       \"args\" :   \"--shardmode --shardcount=10 --shardid=0\" , \n     }, \n     { \n       \"name\" :   \"Shard 1\" , \n       \"script\" :   \"./WildBeast/DougBot.js\" , \n       \"cwd\" :   \"/home/youraccountname/WildBeast\" , \n       \"args\" :   \"--shardmode --shardcount=10 --shardid=1\" , \n     }, \n     { \n       \"name\" :   \"Shard 2\" , \n       \"script\" :   \"./WildBeast/DougBot.js\" , \n       \"cwd\" :   \"/home/youraccountname/WildBeast\" , \n       \"args\" :   \"--shardmode --shardcount=10 --shardid=2\" , \n     } \n   ]  }   You could as an additional safeguard apply the  \"force\": true  flag in order to suppress PM2 warnings regarding a process being started multiple times.  Extend the above until all shards are covered. Then just pass the file to PM2 in order to start it. This can be done with  pm2 start processes.json .  Additional reading about PM2 process files:  http://pm2.keymetrics.io/docs/usage/application-declaration  That in a nutshell is how Discord gateway sharding works and how to use it with WildBeast.",
            "title": "Starting in shard mode"
        },
        {
            "location": "/powershell/",
            "text": "For you who are running the Windows 10 Creators Update, there is a certain negative thing that comes with this update that you may already have noticed. When you try to open a command prompt in a folder from the context menu, PowerShell has replaced the base CMD in Windows. Not even changing the setting is guaranteed to help. And our guide instructs using base CMD.\n\n\nNo worries though! We don't like this either and are hence instructing you how to revert this change. Or, well, work around it.\n\n\nFirst steps\n\n\n\n\nBefore you begin\n\n\nWhat you're going to start altering is potentially destructive if misused. The registry editor has a lot of power and can screw up your computer if you do this wrong. If technology isn't your strong suit, be sure to follow very carefully. In case somebody else is using your computer or governing over it, perhaps ask them for permission to tweak the registry before you proceed.\n\n\nWe in TheSharks are not responsible for issues caused by your actions in the registry!\n\n\n\n\nOpen the registry editor by pressing Win + R, typing \nregedit\n and hitting Enter.\n\n\nAs a good safety measure, before you start, export your registry settings somewhere so you can revert to a working config if and when things go haywire. Open the File menu, select Export and put them in a safe place.\n\n\nYou should be good to start hacking around in the registry now.\n\n\nCreating permission overrides\n\n\nMove to \nHKEY_CLASSES_ROOT\\Directory\\shell\\Powershell\n. Then right-click the \nPowershell\n key in the bar to the left and select Permissions. In the window that opens, click Advanced which will open the permissions editor.\n\n\n\n\n\n\nIn the permissions editor, click Change at the top of the window. Then enter your current username in the text box, click Check Names and if it passes click OK. Tick \"Replace owner on subcontainers and objects\" after which hit OK to close the window.\n\n\nCheck the GIF below if you want a visual representation.\n\n\n\n\nNow, in the permissions window, select Adminstrators and give them \nFull control\n permissions to the registry key.\n\n\n\n\nCreate a new string value in the key called \nProgrammaticAccessOnly\n. The casing is important here!\n\n\n\n\nRepeat the process above for keys \nHKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Powershell\n and \nHKEY_CLASSES_ROOT\\Drive\\Background\\shell\\Powershell\n.\n\n\n\n\nNote\n\n\nHKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Powershell\n might not exist on all systems. If it doesn't exist, omit the permission override process for it.\n\n\n\n\nNow, if you Shift+Right click in a folder, you should be able to see \"Open command window here\" instead of PowerShell. If so, good! You're now done with this guide.\n\n\nIf not, there are some extra fixes required. We'll walk you through that below.\n\n\nOptional additional fixes\n\n\nDownload this ZIP file with a registry file in it: \nhttp://lwtechgaming.me/files/ReinstateCMD.zip\n\n\nIf you just got skeptical, good! You're smart. Why should you trust this file? Well, it's not intended for anything malicious. The only thing that ZIP contains is a .reg file with necessary tweaks. The registry file itself does not do anything malicious.\n\n\nFor transparency, here is the registry file's contents. You can open it with a text editor and check if it matches if you're really scrutinous.\n\n\nWindows Registry Editor Version 5.00\n\n\n\n; Created by: Linus Willner\n\n\n; Created on: May 2nd 2017\n\n\n; Guide: http://docs.thesharks.xyz/powershell\n\n\n\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\cmd2]\n\n\n@\n=\n\"@shell32.dll,-8506\"\n\n\n\"Extended\"\n=\n\"\"\n\n\n\"Icon\"\n=\n\"imageres.dll,-5323\"\n\n\n\"NoWorkingDirectory\"\n=\n\"\"\n\n\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\cmd2\\command]\n\n\n@\n=\n\"cmd.exe /s /k pushd \\\"%V\\\"\"\n\n\n\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\cmd2]\n\n\n@\n=\n\"@shell32.dll,-8506\"\n\n\n\"Extended\"\n=\n\"\"\n\n\n\"Icon\"\n=\n\"imageres.dll,-5323\"\n\n\n\"NoWorkingDirectory\"\n=\n\"\"\n\n\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\cmd2\\command]\n\n\n@\n=\n\"cmd.exe /s /k pushd \\\"%V\\\"\"\n\n\n\n\n[HKEY_CLASSES_ROOT\\Drive\\shell\\cmd2]\n\n\n@\n=\n\"@shell32.dll,-8506\"\n\n\n\"Extended\"\n=\n\"\"\n\n\n\"Icon\"\n=\n\"imageres.dll,-5323\"\n\n\n\"NoWorkingDirectory\"\n=\n\"\"\n\n\n\n[HKEY_CLASSES_ROOT\\Drive\\shell\\cmd2\\command]\n\n\n@\n=\n\"cmd.exe /s /k pushd \\\"%V\\\"\"\n\n\n\n\n[HKEY_CLASSES_ROOT\\LibraryFolder\\Background\\shell\\cmd2]\n\n\n@\n=\n\"@shell32.dll,-8506\"\n\n\n\"Extended\"\n=\n\"\"\n\n\n\"Icon\"\n=\n\"imageres.dll,-5323\"\n\n\n\"NoWorkingDirectory\"\n=\n\"\"\n\n\n\n[HKEY_CLASSES_ROOT\\LibraryFolder\\Background\\shell\\cmd2\\command]\n\n\n@\n=\n\"cmd.exe /s /k pushd \\\"%V\\\"\"\n\n\n\n\n\n\nIf you wish, backup your registry again now before making changes. When you've downloaded the ZIP file, double click the registry entry file inside it and allow it to alter the registry via the security prompts.\n\n\nAnd that's it! You should now be able to use CMD from the context menu again without PowerShell being in your face.\n\n\nIf you still get issues, perhaps try Googling or coming over to our Discord server. We'll help you if you have questions.\n\n\n\n\nWarning\n\n\nWe are not responsible for nor will we help you fix your broken registry if you break it - we will only tell you to restore the entries from a backup.\n\n\n\n\nThe link to our Discord server can be found from the \nhomepage\n in the docs if you need it. Good luck in your future endeavours!",
            "title": "PowerShell to CMD"
        },
        {
            "location": "/powershell/#first-steps",
            "text": "Before you begin  What you're going to start altering is potentially destructive if misused. The registry editor has a lot of power and can screw up your computer if you do this wrong. If technology isn't your strong suit, be sure to follow very carefully. In case somebody else is using your computer or governing over it, perhaps ask them for permission to tweak the registry before you proceed.  We in TheSharks are not responsible for issues caused by your actions in the registry!   Open the registry editor by pressing Win + R, typing  regedit  and hitting Enter.  As a good safety measure, before you start, export your registry settings somewhere so you can revert to a working config if and when things go haywire. Open the File menu, select Export and put them in a safe place.  You should be good to start hacking around in the registry now.",
            "title": "First steps"
        },
        {
            "location": "/powershell/#creating-permission-overrides",
            "text": "Move to  HKEY_CLASSES_ROOT\\Directory\\shell\\Powershell . Then right-click the  Powershell  key in the bar to the left and select Permissions. In the window that opens, click Advanced which will open the permissions editor.    In the permissions editor, click Change at the top of the window. Then enter your current username in the text box, click Check Names and if it passes click OK. Tick \"Replace owner on subcontainers and objects\" after which hit OK to close the window.  Check the GIF below if you want a visual representation.   Now, in the permissions window, select Adminstrators and give them  Full control  permissions to the registry key.   Create a new string value in the key called  ProgrammaticAccessOnly . The casing is important here!   Repeat the process above for keys  HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Powershell  and  HKEY_CLASSES_ROOT\\Drive\\Background\\shell\\Powershell .   Note  HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Powershell  might not exist on all systems. If it doesn't exist, omit the permission override process for it.   Now, if you Shift+Right click in a folder, you should be able to see \"Open command window here\" instead of PowerShell. If so, good! You're now done with this guide.  If not, there are some extra fixes required. We'll walk you through that below.",
            "title": "Creating permission overrides"
        },
        {
            "location": "/powershell/#optional-additional-fixes",
            "text": "Download this ZIP file with a registry file in it:  http://lwtechgaming.me/files/ReinstateCMD.zip  If you just got skeptical, good! You're smart. Why should you trust this file? Well, it's not intended for anything malicious. The only thing that ZIP contains is a .reg file with necessary tweaks. The registry file itself does not do anything malicious.  For transparency, here is the registry file's contents. You can open it with a text editor and check if it matches if you're really scrutinous.  Windows Registry Editor Version 5.00  ; Created by: Linus Willner  ; Created on: May 2nd 2017  ; Guide: http://docs.thesharks.xyz/powershell  [HKEY_CLASSES_ROOT\\Directory\\shell\\cmd2]  @ = \"@shell32.dll,-8506\"  \"Extended\" = \"\"  \"Icon\" = \"imageres.dll,-5323\"  \"NoWorkingDirectory\" = \"\"  [HKEY_CLASSES_ROOT\\Directory\\shell\\cmd2\\command]  @ = \"cmd.exe /s /k pushd \\\"%V\\\"\"  [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\cmd2]  @ = \"@shell32.dll,-8506\"  \"Extended\" = \"\"  \"Icon\" = \"imageres.dll,-5323\"  \"NoWorkingDirectory\" = \"\"  [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\cmd2\\command]  @ = \"cmd.exe /s /k pushd \\\"%V\\\"\"  [HKEY_CLASSES_ROOT\\Drive\\shell\\cmd2]  @ = \"@shell32.dll,-8506\"  \"Extended\" = \"\"  \"Icon\" = \"imageres.dll,-5323\"  \"NoWorkingDirectory\" = \"\"  [HKEY_CLASSES_ROOT\\Drive\\shell\\cmd2\\command]  @ = \"cmd.exe /s /k pushd \\\"%V\\\"\"  [HKEY_CLASSES_ROOT\\LibraryFolder\\Background\\shell\\cmd2]  @ = \"@shell32.dll,-8506\"  \"Extended\" = \"\"  \"Icon\" = \"imageres.dll,-5323\"  \"NoWorkingDirectory\" = \"\"  [HKEY_CLASSES_ROOT\\LibraryFolder\\Background\\shell\\cmd2\\command]  @ = \"cmd.exe /s /k pushd \\\"%V\\\"\"   If you wish, backup your registry again now before making changes. When you've downloaded the ZIP file, double click the registry entry file inside it and allow it to alter the registry via the security prompts.  And that's it! You should now be able to use CMD from the context menu again without PowerShell being in your face.  If you still get issues, perhaps try Googling or coming over to our Discord server. We'll help you if you have questions.   Warning  We are not responsible for nor will we help you fix your broken registry if you break it - we will only tell you to restore the entries from a backup.   The link to our Discord server can be found from the  homepage  in the docs if you need it. Good luck in your future endeavours!",
            "title": "Optional additional fixes"
        },
        {
            "location": "/credits/",
            "text": "There are some people in our team and community that should be acclaimed for their work with our documentation. Here you can find the contributors to this piece of writing.\n\n\nMain contributors\n\n\nThese people write, construct and handle most of the documentation.\n\n\n \n \n\n\n\n\nLWTechGaming\n \"LW\"\n\n\nLead documentation writer\n\n\nCurrent maintainer and project lead\n\n\n\n\n\n\nDougley\n \"Dougley\"\n\n\nCI and deployment engineer\n\n\nLegal assistance\n\n\n\n\n\n\nzaza7\n \"Zaza\"\n\n\nLinux guide co-writer\n\n\nTesting and feedback for Linux texts\n\n\n\n\n\n\n\n\nOther contributors\n\n\nWhile less influential than the main contributors, these people have still provided worthwile fixes and corrections to the documentation.\n\n\n \n \n \n\n\n\n\nandre-paulo98\n\n\nMiscellaneous improvements\n\n\n\n\n\n\nRyoshiKayo\n\n\nLinux guide improvements\n\n\n\n\n\n\narunesh90\n\n\nMiscellaneous improvements\n\n\n\n\n\n\ncaf203\n\n\nGrammar fixes",
            "title": "Credits"
        },
        {
            "location": "/credits/#main-contributors",
            "text": "These people write, construct and handle most of the documentation.        LWTechGaming  \"LW\"  Lead documentation writer  Current maintainer and project lead    Dougley  \"Dougley\"  CI and deployment engineer  Legal assistance    zaza7  \"Zaza\"  Linux guide co-writer  Testing and feedback for Linux texts",
            "title": "Main contributors"
        },
        {
            "location": "/credits/#other-contributors",
            "text": "While less influential than the main contributors, these people have still provided worthwile fixes and corrections to the documentation.          andre-paulo98  Miscellaneous improvements    RyoshiKayo  Linux guide improvements    arunesh90  Miscellaneous improvements    caf203  Grammar fixes",
            "title": "Other contributors"
        }
    ]
}